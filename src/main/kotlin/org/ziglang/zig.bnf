{
  parserClass="org.ziglang.psi.parser.ZigLangParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Zig"
  psiImplClassSuffix="Impl"
  psiPackage="org.ziglang.psi"
  psiImplPackage="org.ziglang.psi.impl"

  elementTypeHolderClass="org.ziglang.psi.ZigLangTypes"
  elementTypeClass="org.ziglang.psi.ZigLangElementType"
  tokenTypeClass="org.ziglang.psi.ZigLangTokenType"
tokens = [
WHITESPACE='regexp:[\s]+'
CONTAINER_DOC='regexp://!.*'
COMMENT='regexp:///.*'
HEX='regexp:[0-9a-fA-F]'
PUB='pub'
FN='fn'
CONST='const'
VAR='var'
EQUAL='='
OR='or'
AND='and'
EXPORT='export'
EXTERN='extern'
INLINE='inline'
NOINLINE='noinline'
THREAD_LOCAL='threadlocal'
USING_NAME_SPACE='usingnamespace'
ALIGN='align'
LINKSECTION='linksection'
CALLCONV='callconv'
COMPTIME='comptime'
ANY_TYPE='anytype'
TEST='test'

EQUALEQUAL='=='
LARROW='<'
RARROW='>'
EXCLAMATIONMARK='!'
EXCLAMATIONMARKEQUAL='!='
LARROWEQUAL='<='
RARROWEQUAL='>='
AMPERSAND='&'
CARET='^'
PIPE='|'
ORELSE='orelse'
catch='catch'
LARROW2='<<'
RARROW2='>>'
PLUS='+'
MINUS='-'
PLUS2='++'
PLUSPERCENT='+%'
MINUSPERCENT='-%'
PIPE2='||'
ASTERISK='*'
SLASH='/'
PERCENT='%'
ASTERISK2='**'
ASTERISKPERCENT='*%'
IF='if'
RETURN='return'
ELSE='else'
LBRACE='{'
RBRACE='}'
ASTERISKEQUAL='*='
SLASHEQUAL='/='
PERCENTEQUAL='%='
PLUSEQUAL='+='
MINUSEQUAL='-='
LARROW2EQUAL='<<='
RARROW2EQUAL='>>='
AMPERSANDEQUAL='&='
CARETEQUAL='^='
PIPEEQUAL='|='
ASTERISKPERCENTEQUAL='*%='
PLUSPERCENTEQUAL='+%='
MINUSPERCENTEQUAL='-%='
TILDE='~'
DOT='.'
TRY='try'
LBRACKET='['
RBRACKET=']'
DOTASTERISK='.*'
DOTQUESTIONMARK='.?'
INTEGER="regexp:\d+"
ID='regexp:[A-Za-z_][A-Za-z0-9_]*'
SEMICOLON=';'
LPAREN='('
RPAREN=')'
COMMA=','
COLON=':'
CHAR_ESCAPE='regexp:\\x[0-9a-fA-F][0-9a-fA-F]|\\u\{[0-9a-fA-F]+}|\\[nr\t"]'
STRING_CHAR='regexp:\\x[0-9a-fA-F][0-9a-fA-F]|\\u\{[0-9a-fA-F]+}|\\[nr\t"]|[^"\n]'
STRINGLITERALSINGLE='regexp:"(\\x[0-9a-fA-F][0-9a-fA-F]|\\u\{[0-9a-fA-F]+}|\\[nr\t"]|[^"\n])*"'
]
}


root ::= container_doc_comment? ContainerMembers
private container_doc_comment ::= CONTAINER_DOC+
private ContainerMembers ::= ContainerDeclarations
private ContainerDeclarations ::=
    TestDecl ContainerDeclarations| TopLevelComptime ContainerDeclarations|(DocComment? PUB? TopLevelDecl)*

TopLevelComptime ::= DocComment? COMPTIME BlockExpr

TestDecl ::= DocComment? TEST STRINGLITERALSINGLE? Block
private DocComment ::= COMMENT+
private TopLevelDecl ::=
    (EXPORT | EXTERN STRINGLITERALSINGLE? | (INLINE | NOINLINE))?  FnProto (SEMICOLON | Block)
    |(EXPORT | EXTERN STRINGLITERALSINGLE?)? THREAD_LOCAL? VarDecl
    | USING_NAME_SPACE Expr SEMICOLON

private FnProto ::= FN ID? LPAREN ParamDeclList RPAREN ByteAlign? LinkSection? CallConv? EXCLAMATIONMARK?  TypeExpr
ByteAlign ::= ALIGN LPAREN Expr RPAREN
LinkSection ::= LINKSECTION LPAREN Expr RPAREN
CallConv ::= CALLCONV LPAREN Expr RPAREN

ParamDeclList ::= (ParamDecl COMMA)* ParamDecl?
ParamDecl ::= (ID COLON)? ParamType
ParamType ::= TypeExpr
TypeExpr ::= ErrorUnionExpr
ErrorUnionExpr ::= SuffixExpr | (EXCLAMATIONMARK TypeExpr)?
SuffixExpr ::= PrimaryTypeExpr (SuffixOp | FnCallArguments)*
SuffixOp ::= LBRACKET Expr (DOT2 (Expr? (COLON Expr)?)?)? RBRACKET
                  | DOT ID
                  | DOTASTERISK
                  | DOTQUESTIONMARK
PrimaryTypeExpr ::= BUILTINIDENTIFIER FnCallArguments | DOT ID | ID | INTEGER | STRINGLITERAL
STRINGLITERAL ::= STRINGLITERALSINGLE
BUILTINIDENTIFIER ::='@' ID
FnCallArguments ::= LPAREN ExprList RPAREN
ExprList ::= (Expr COMMA)* Expr?

VarDecl ::= (CONST |VAR) ID (COLON TypeExpr)? ByteAlign? LinkSection? (EQUAL Expr)? SEMICOLON

ContainerField ::= DocComment? COMPTIME? ID (COLON (ANY_TYPE|TypeExpr) ByteAlign?)? (EQUAL Expr)?

Expr ::= BoolOrExpr
BoolOrExpr ::= BoolAndExpr (OR BoolAndExpr)*
BoolAndExpr ::= CompareExpr (AND CompareExpr)*
CompareExpr ::= BitwiseExpr (CompareOp BitwiseExpr)?
CompareOp ::= EQUALEQUAL | EXCLAMATIONMARKEQUAL |LARROW |RARROW|LARROWEQUAL|RARROWEQUAL
BitwiseExpr ::= BitShiftExpr (BitwiseOp BitShiftExpr)*

BitwiseOp ::= AMPERSAND | CARET | PIPE | orelse | catch Payload?
Payload ::= PIPE ID PIPE

BitShiftExpr ::= AdditionExpr (BitShiftOp AdditionExpr)*
BitShiftOp ::=  LARROW2 | RARROW2
AdditionExpr ::= MultiplyExpr (AdditionOp MultiplyExpr)*
AdditionOp ::= PLUS | MINUS | PLUS2 | PLUSPERCENT | MINUSPERCENT
MultiplyExpr ::= PrefixExpr (MultiplyOp PrefixExpr)*
MultiplyOp ::= PIPE2 | ASTERISK | SLASH | PERCENT | ASTERISK2 | ASTERISKPERCENT
PrefixExpr ::= PrefixOp* PrimaryExpr
PrimaryExpr::= IfExpr | RETURN Expr?| Block | CurlySuffixExpr


CurlySuffixExpr ::= TypeExpr
IfExpr ::= IfPrefix Expr (ELSE Payload? Expr)?
IfPrefix ::= IF LPAREN Expr RPAREN PtrPayload?
PtrPayload ::= PIPE ASTERISK? ID PIPE
Block ::= LBRACE Statement* RBRACE

BlockExpr ::= BlockLabel? Block
BlockLabel ::= ID COLON
Statement ::= VarDecl | AssignExpr SEMICOLON
AssignExpr ::= Expr (AssignOp Expr)?
AssignOp
    ::= ASTERISKEQUAL
     | SLASHEQUAL
     | PERCENTEQUAL
     | PLUSEQUAL
     | MINUSEQUAL
     | LARROW2EQUAL
     | RARROW2EQUAL
     | AMPERSANDEQUAL
     | CARETEQUAL
     | PIPEEQUAL
     | ASTERISKPERCENTEQUAL
     | PLUSPERCENTEQUAL
     | MINUSPERCENTEQUAL
     | EQUAL

PrefixOp
    ::= EXCLAMATIONMARK
     | MINUS
     | TILDE
     | MINUSPERCENT
     | AMPERSAND
     | TRY
     | AWAIT