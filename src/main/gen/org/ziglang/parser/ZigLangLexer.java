/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZigLangLexer.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\36\1\2\3\3\22\20\1\23\1\101\1\35\2\20\1\106\1\102\1\6\1\115\1\116"+
    "\1\107\1\105\1\117\1\46\1\44\1\24\1\43\1\40\6\42\2\25\1\120\1\114\1\77\1\72"+
    "\1\100\1\113\1\20\1\121\3\27\1\47\1\27\2\26\1\123\6\26\1\45\3\26\1\124\2\26"+
    "\1\122\3\26\1\111\1\30\1\112\1\103\1\41\1\20\1\57\1\50\1\55\1\66\1\61\1\64"+
    "\1\73\1\67\1\63\1\26\1\70\1\65\1\62\1\37\1\51\1\56\1\60\1\54\1\52\1\53\1\32"+
    "\1\71\1\75\1\31\1\74\1\76\1\33\1\104\1\34\1\110\1\20\5\10\1\5\12\10\20\15"+
    "\1\22\37\4\2\0\36\17\1\16\14\13\1\14\2\13\1\12\3\11\1\7\213\0\1\21\177\0\13"+
    "\21\35\0\2\1\5\0\1\21\57\0\1\21\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\2\5\1\6"+
    "\1\7\1\1\2\5\1\4\1\10\1\11\1\12\5\5"+
    "\1\13\2\5\1\12\5\5\1\14\1\5\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\5\7\0\1\37\2\12\2\5\2\0\1\40\2\5"+
    "\3\4\1\41\1\42\1\43\1\44\1\45\1\46\2\12"+
    "\1\5\1\47\24\5\1\50\1\51\6\5\1\52\1\53"+
    "\1\5\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\5\1\74\7\0\1\75\1\76\4\5\1\40"+
    "\3\5\1\12\1\77\1\100\7\5\1\101\10\5\1\102"+
    "\1\5\1\103\1\5\1\104\11\5\1\105\4\5\1\106"+
    "\1\5\1\107\1\110\1\111\1\112\1\5\6\0\4\5"+
    "\1\113\10\5\1\114\1\115\20\5\1\116\2\5\1\117"+
    "\7\5\1\0\1\5\1\120\4\5\1\121\10\5\1\122"+
    "\2\5\1\123\4\5\1\124\1\125\3\5\1\126\2\5"+
    "\1\127\1\5\1\130\1\5\1\131\1\132\5\5\1\133"+
    "\1\134\1\5\1\135\1\136\1\5\1\137\1\140\3\5"+
    "\1\141\3\5\1\142\1\143\1\5\1\144\7\5\1\145"+
    "\4\5\1\146\11\5\1\147\1\5\1\150\1\151\1\152"+
    "\1\153\1\5\1\154\1\5\1\155\1\5\1\156\1\5"+
    "\1\157\1\5\1\160\5\5\1\161\1\5\1\162\1\163"+
    "\2\5\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\125\0\125\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451"+
    "\0\u04a6\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9"+
    "\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1"+
    "\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49"+
    "\0\u0c9e\0\u0cf3\0\125\0\125\0\125\0\125\0\125\0\125"+
    "\0\125\0\125\0\125\0\u0d48\0\u0d9d\0\u0df2\0\u0e47\0\u0e9c"+
    "\0\u0ef1\0\u0f46\0\u0f9b\0\125\0\u0ff0\0\u1045\0\u109a\0\u10ef"+
    "\0\u02a8\0\u1144\0\125\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed"+
    "\0\u1342\0\125\0\125\0\125\0\125\0\u1397\0\u13ec\0\u1441"+
    "\0\u1496\0\u14eb\0\u1540\0\u1595\0\u15ea\0\u163f\0\u1694\0\u16e9"+
    "\0\u173e\0\u1793\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991"+
    "\0\u19e6\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u01fe\0\u01fe"+
    "\0\u1be4\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\125\0\125"+
    "\0\u1de2\0\125\0\u1e37\0\125\0\u1e8c\0\125\0\125\0\125"+
    "\0\125\0\125\0\125\0\125\0\u1ee1\0\125\0\125\0\u1f36"+
    "\0\125\0\u1f8b\0\125\0\u1fe0\0\u2035\0\u208a\0\u20df\0\u2134"+
    "\0\u2189\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387\0\u23dc"+
    "\0\u02a8\0\u2431\0\u2486\0\u24db\0\u2530\0\125\0\125\0\u2585"+
    "\0\u25da\0\u262f\0\u2684\0\u26d9\0\u272e\0\u2783\0\u01fe\0\u27d8"+
    "\0\u282d\0\u2882\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u01fe"+
    "\0\u2a80\0\u01fe\0\u2ad5\0\u01fe\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29"+
    "\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u01fe\0\u2e27\0\u2e7c"+
    "\0\u2ed1\0\u2f26\0\u01fe\0\u2f7b\0\125\0\125\0\125\0\125"+
    "\0\u2fd0\0\u3025\0\u307a\0\u30cf\0\u3124\0\u3179\0\u31ce\0\u3223"+
    "\0\u3278\0\u32cd\0\u3322\0\u01fe\0\u3377\0\u33cc\0\u3421\0\u3476"+
    "\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u01fe\0\u01fe\0\u361f\0\u3674"+
    "\0\u36c9\0\u371e\0\u3773\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u391c"+
    "\0\u3971\0\u39c6\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u01fe\0\u3b6f"+
    "\0\u3bc4\0\u01fe\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2"+
    "\0\u3e17\0\u3e6c\0\u3ec1\0\u01fe\0\u3f16\0\u3f6b\0\u3fc0\0\u4015"+
    "\0\u01fe\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268"+
    "\0\u42bd\0\u01fe\0\u4312\0\u4367\0\u01fe\0\u43bc\0\u4411\0\u4466"+
    "\0\u44bb\0\u01fe\0\u01fe\0\u4510\0\u4565\0\u45ba\0\u01fe\0\u460f"+
    "\0\u4664\0\u01fe\0\u46b9\0\u01fe\0\u470e\0\u01fe\0\u01fe\0\u4763"+
    "\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u01fe\0\u01fe\0\u490c\0\u01fe"+
    "\0\u01fe\0\u4961\0\u01fe\0\u01fe\0\u49b6\0\u4a0b\0\u4a60\0\u01fe"+
    "\0\u4ab5\0\u4b0a\0\u4b5f\0\u01fe\0\u01fe\0\u4bb4\0\u01fe\0\u4c09"+
    "\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07\0\u01fe\0\u4e5c"+
    "\0\u4eb1\0\u4f06\0\u4f5b\0\u01fe\0\u4fb0\0\u5005\0\u505a\0\u50af"+
    "\0\u5104\0\u5159\0\u51ae\0\u5203\0\u5258\0\u01fe\0\u52ad\0\u01fe"+
    "\0\u01fe\0\u01fe\0\u01fe\0\u5302\0\u01fe\0\u5357\0\u01fe\0\u53ac"+
    "\0\u01fe\0\u5401\0\u01fe\0\u5456\0\u01fe\0\u54ab\0\u5500\0\u5555"+
    "\0\u55aa\0\u55ff\0\u01fe\0\u5654\0\u01fe\0\u01fe\0\u56a9\0\u56fe"+
    "\0\u01fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\3\1\4\12\2\3\3\1\5"+
    "\1\6\2\7\1\2\1\7\1\10\1\11\1\12\1\13"+
    "\1\3\1\14\1\6\1\15\1\6\1\16\1\17\1\7"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\7\1\32\1\7\1\33\1\34\1\35"+
    "\1\36\2\7\1\37\1\40\2\7\1\41\1\7\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\3\7\126\0\3\3\1\0\1\3\13\0"+
    "\3\3\12\0\1\3\71\0\1\65\2\0\1\66\2\0"+
    "\1\67\1\0\1\70\3\0\1\71\1\65\2\0\5\65"+
    "\1\72\74\65\24\0\1\73\45\0\1\74\57\0\1\6"+
    "\12\0\4\6\1\75\2\0\1\76\11\0\1\76\70\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\23\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\1\77\4\7\1\0\1\7\1\0\3\7"+
    "\1\100\17\7\1\0\4\7\22\0\4\7\2\101\1\0"+
    "\25\101\1\102\4\101\1\103\67\101\25\0\3\7\1\0"+
    "\1\7\1\104\4\0\5\7\1\0\1\7\1\0\2\7"+
    "\1\105\20\7\1\0\4\7\22\0\4\7\25\0\1\15"+
    "\2\7\1\0\2\7\4\0\1\7\4\15\1\75\1\7"+
    "\1\0\1\21\11\7\1\21\10\7\1\0\4\7\22\0"+
    "\4\7\25\0\1\6\3\0\1\106\6\0\4\6\1\75"+
    "\2\0\1\76\1\107\1\110\7\0\1\76\70\0\1\75"+
    "\12\0\4\75\1\111\2\0\1\76\11\0\1\76\25\0"+
    "\1\112\3\0\1\113\103\0\1\114\5\0\1\115\5\0"+
    "\1\116\43\0\1\117\2\7\1\0\2\7\4\0\1\7"+
    "\4\117\1\0\1\7\1\120\23\7\1\0\4\7\6\0"+
    "\1\120\13\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\5\7\1\121\15\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\5\7\1\122\1\7\1\123"+
    "\13\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\1\7\1\124\4\0\5\7\1\0\1\7\1\0\4\7"+
    "\1\125\16\7\1\0\2\7\1\126\1\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\5\7\1\127\4\7\1\130\5\7\1\131\2\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\12\7\1\132\10\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\2\7\1\133\5\7"+
    "\1\134\12\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\1\7\1\135\4\0\5\7\1\0\1\7\1\0"+
    "\10\7\1\136\12\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\1\137\4\7\1\0\1\7"+
    "\1\0\3\7\1\140\12\7\1\141\4\7\1\0\4\7"+
    "\22\0\4\7\25\0\1\117\2\7\1\0\1\142\1\7"+
    "\4\0\1\143\4\117\1\0\1\7\1\120\5\7\1\144"+
    "\10\7\1\145\4\7\1\0\4\7\6\0\1\120\13\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\1\146\4\7"+
    "\1\0\1\7\1\0\15\7\1\147\5\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\1\150"+
    "\4\7\1\0\1\7\1\0\2\7\1\151\5\7\1\152"+
    "\12\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\14\7\1\153"+
    "\6\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\154"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\2\7\1\155"+
    "\5\7\1\156\12\7\1\0\4\7\22\0\4\7\72\0"+
    "\1\157\5\0\1\160\51\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\20\7\1\161\2\7\1\0"+
    "\4\7\22\0\4\7\72\0\1\162\4\0\1\163\117\0"+
    "\1\164\5\0\1\165\116\0\1\166\124\0\1\167\124\0"+
    "\1\170\124\0\1\171\11\0\1\172\112\0\1\173\12\0"+
    "\1\174\1\175\110\0\1\176\124\0\1\177\13\0\1\200"+
    "\1\201\42\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\23\7\1\0\4\7\22\0\1\7\1\202"+
    "\2\7\6\0\1\203\125\0\1\204\2\0\1\205\1\0"+
    "\1\206\1\0\1\207\112\0\2\70\2\0\1\70\4\0"+
    "\1\70\4\0\1\70\106\0\2\71\2\0\1\71\4\0"+
    "\1\71\4\0\1\71\106\0\2\65\2\0\1\65\4\0"+
    "\1\65\4\0\1\65\110\0\1\65\22\0\1\210\1\211"+
    "\2\0\3\65\14\0\1\65\50\0\1\212\3\213\1\212"+
    "\1\213\16\212\1\214\100\212\25\0\1\75\12\0\4\75"+
    "\3\0\1\76\11\0\1\76\70\0\1\120\12\0\4\120"+
    "\2\0\1\120\36\0\1\120\44\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\5\7\1\215\6\7"+
    "\1\216\2\7\1\217\3\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\14\7\1\220\6\7\1\0\4\7\22\0\4\7"+
    "\2\101\1\0\25\101\1\102\4\101\1\221\67\101\25\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\16\7\1\222\4\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\3\7\1\223\10\7\1\224\6\7\1\0\4\7\22\0"+
    "\4\7\25\0\1\106\1\0\1\106\10\0\4\106\1\225"+
    "\1\76\1\0\2\106\4\0\1\106\1\76\1\106\1\0"+
    "\1\106\2\0\1\106\1\0\1\106\32\0\1\106\43\0"+
    "\2\107\1\0\1\107\121\0\4\110\125\0\1\226\152\0"+
    "\1\227\57\0\1\117\2\7\1\0\2\7\4\0\1\7"+
    "\4\117\1\0\1\7\1\0\23\7\1\0\4\7\22\0"+
    "\4\7\25\0\1\120\12\0\4\120\106\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\230"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\231"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\10\7\1\232"+
    "\12\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\3\7\1\233"+
    "\17\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\5\7\1\234"+
    "\15\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\14\7\1\235"+
    "\6\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\1\7\1\236\4\0\5\7\1\0\1\7\1\0\23\7"+
    "\1\0\1\7\1\237\2\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\3\7"+
    "\1\240\17\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\5\7"+
    "\1\241\15\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\3\7"+
    "\1\242\1\243\16\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\1\244\4\7\1\0\1\7"+
    "\1\0\13\7\1\245\7\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\4\7\1\246\11\7\1\247\4\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\1\7\1\250\21\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\6\7\1\251\14\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\17\7\1\252\3\7\1\0\1\7"+
    "\1\253\2\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\13\7\1\254\7\7"+
    "\1\0\1\7\1\255\2\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\14\7"+
    "\1\256\1\7\1\257\4\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\4\7\1\260\2\7\1\261\13\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\1\7\1\262\4\0"+
    "\5\7\1\0\1\7\1\0\23\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\5\7\1\263\15\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\3\7\1\264\17\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\16\7\1\265\4\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\5\7\1\266\15\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\16\7\1\267\4\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\1\270\4\7"+
    "\1\0\1\7\1\0\23\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\15\7\1\271\5\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\16\7\1\272\4\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\5\7\1\273\15\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\14\7\1\274\6\7\1\0\4\7\22\0\4\7"+
    "\72\0\1\275\124\0\1\276\124\0\1\277\124\0\1\300"+
    "\57\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\23\7\1\0\4\7\22\0\1\301\3\7\6\0"+
    "\1\302\124\0\1\303\124\0\1\304\124\0\1\305\143\0"+
    "\1\306\1\0\1\306\10\0\1\306\1\0\2\306\3\0"+
    "\2\306\4\0\1\306\1\0\1\306\1\0\1\306\2\0"+
    "\1\306\1\0\1\306\32\0\1\306\36\0\1\307\71\0"+
    "\1\212\3\213\1\212\1\213\117\212\125\213\1\214\3\213"+
    "\1\214\1\213\117\214\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\12\7\1\310\10\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\2\7\1\311\20\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\12\7\1\312\10\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\1\313\4\7\1\0\1\7\1\0\23\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\16\7\1\314\4\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\1\7\1\315\4\0"+
    "\5\7\1\0\1\7\1\0\23\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\1\316\4\7"+
    "\1\0\1\7\1\0\23\7\1\0\4\7\22\0\4\7"+
    "\25\0\1\225\1\0\1\225\10\0\4\225\1\0\1\76"+
    "\1\0\2\225\4\0\1\225\1\76\1\225\1\0\1\225"+
    "\2\0\1\225\1\0\1\225\32\0\1\225\30\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\10\7"+
    "\1\317\12\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\16\7"+
    "\1\320\4\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\11\7"+
    "\1\321\11\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\7\7"+
    "\1\322\13\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\1\7\1\323\4\0\5\7\1\0\1\7\1\0"+
    "\23\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\4\7\1\324"+
    "\16\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\325"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\4\7\1\326"+
    "\16\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\327"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\1\7\1\330\4\0\5\7\1\0\1\7\1\0\23\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\1\7"+
    "\1\331\4\0\5\7\1\0\1\7\1\0\23\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\3\7\1\332\1\333\16\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\7\7\1\334\13\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\6\7\1\335\14\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\16\7\1\336\4\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\21\7\1\337\1\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\4\7\1\340\10\7"+
    "\1\341\5\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\1\342\4\7\1\0\1\7\1\0"+
    "\23\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\23\7\1\0"+
    "\1\343\3\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\2\7\1\344\20\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\12\7\1\345\10\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\2\7\1\346\20\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\13\7\1\347\7\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\2\7\1\350\14\7"+
    "\1\351\3\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\12\7"+
    "\1\352\10\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\14\7"+
    "\1\353\6\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\3\7"+
    "\1\354\17\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\21\7"+
    "\1\355\1\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\12\7"+
    "\1\356\10\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\10\7"+
    "\1\357\12\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\16\7"+
    "\1\360\4\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\23\7"+
    "\1\0\4\7\22\0\2\7\1\361\1\7\5\0\1\70"+
    "\2\0\1\70\120\0\1\70\10\0\1\70\4\0\1\70"+
    "\107\0\1\71\2\0\1\71\4\0\1\71\113\0\1\71"+
    "\15\0\1\71\127\0\1\65\1\0\1\65\10\0\1\65"+
    "\1\0\2\65\3\0\2\65\4\0\1\65\1\0\1\65"+
    "\1\0\1\65\2\0\1\65\1\0\1\65\32\0\1\65"+
    "\30\0\1\362\1\0\1\362\10\0\1\362\1\0\2\362"+
    "\3\0\2\362\4\0\1\362\1\0\1\362\1\0\1\362"+
    "\2\0\1\362\1\0\1\362\32\0\1\362\30\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\10\7"+
    "\1\363\12\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\1\364\4\7\1\0\1\7\1\0"+
    "\23\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\15\7\1\365"+
    "\5\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\23\7\1\0"+
    "\1\366\3\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\3\7\1\367\17\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\16\7\1\370\4\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\21\7\1\371\1\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\3\7\1\372\17\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\1\7"+
    "\1\373\4\0\5\7\1\0\1\7\1\0\23\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\12\7\1\374\10\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\6\7\1\375\14\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\6\7\1\376\14\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\10\7\1\377\12\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\13\7\1\u0100\7\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\5\7\1\u0101\15\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\4\7\1\u0102\16\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\14\7\1\u0103\6\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\4\7\1\u0104\16\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\20\7\1\u0105\2\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\6\7\1\u0106\14\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\12\7\1\u0107\10\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\23\7\1\0\1\7\1\u0108"+
    "\2\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\5\7\1\u0109\15\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\6\7\1\u010a\14\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\1\u010b\4\7\1\0\1\7\1\0\23\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\23\7\1\0\2\7\1\u010c\1\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\5\7\1\u010d\15\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\5\7\1\u010e\15\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\5\7\1\u010f\15\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\12\7\1\u0110\10\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\1\u0111"+
    "\4\7\1\0\1\7\1\0\23\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\12\7\1\u0112\10\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\3\7\1\u0113\17\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\5\7\1\u0114\15\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\4\7\1\u0115\16\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\12\7\1\u0116\10\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\23\7\1\0\4\7\22\0\3\7\1\u0117"+
    "\25\0\1\362\1\0\1\362\4\0\1\65\3\0\1\362"+
    "\1\0\2\362\3\0\2\362\4\0\1\362\1\0\1\362"+
    "\1\0\1\362\2\0\1\362\1\0\1\362\32\0\1\362"+
    "\30\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\6\7\1\u0118\14\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\14\7\1\u0119\6\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\1\u011a\4\7\1\0"+
    "\1\7\1\0\23\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\7\7\1\u011b\13\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\14\7\1\u011c\6\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\12\7\1\u011d\10\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\12\7\1\u011e\10\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\1\u011f\4\7\1\0\1\7"+
    "\1\0\23\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\4\7"+
    "\1\u0120\16\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\20\7"+
    "\1\u0121\2\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\17\7"+
    "\1\u0122\3\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\12\7"+
    "\1\u0123\10\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\1\u0124\4\7\1\0\1\7\1\0"+
    "\23\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\1\u0125\4\7\1\0\1\7\1\0\23\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\14\7\1\u0126\6\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\2\7\1\u0127\20\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\17\7\1\u0128\3\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\7\7\1\u0129\13\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\10\7\1\u012a\12\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\23\7\1\0\3\7"+
    "\1\u012b\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\1\u012c\4\7\1\0\1\7\1\0\23\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\4\7\1\u012d\16\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\15\7\1\u012e\5\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\12\7\1\u012f\10\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\12\7\1\u0130\10\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\14\7\1\u0131\6\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\1\0\20\7\1\u0132\2\7\1\0\4\7"+
    "\22\0\4\7\25\0\3\7\1\0\2\7\4\0\1\u0133"+
    "\4\7\1\0\1\7\1\0\23\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\10\7\1\u0134\12\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\1\0\12\7\1\u0135\10\7\1\0\4\7\22\0"+
    "\4\7\25\0\3\7\1\0\2\7\4\0\1\u0136\4\7"+
    "\1\0\1\7\1\0\23\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\17\7\1\u0137\3\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\0\16\7\1\u0138\4\7\1\0\4\7\22\0\4\7"+
    "\25\0\3\7\1\0\1\7\1\u0139\4\0\5\7\1\0"+
    "\1\7\1\0\23\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\1\0"+
    "\13\7\1\u013a\7\7\1\0\4\7\22\0\4\7\25\0"+
    "\3\7\1\0\2\7\4\0\1\u013b\4\7\1\0\1\7"+
    "\1\0\23\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\12\7"+
    "\1\u013c\10\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\13\7"+
    "\1\u013d\7\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\12\7"+
    "\1\u013e\10\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\12\7"+
    "\1\u013f\10\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\6\7"+
    "\1\u0140\14\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\16\7"+
    "\1\u0141\4\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\10\7"+
    "\1\u0142\12\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\12\7"+
    "\1\u0143\10\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\0\13\7"+
    "\1\u0144\7\7\1\0\4\7\22\0\4\7\25\0\3\7"+
    "\1\0\2\7\4\0\1\u0145\4\7\1\0\1\7\1\0"+
    "\23\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\u0146"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\2\7\1\u0147"+
    "\20\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\u0148"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\12\7\1\u0149"+
    "\10\7\1\0\4\7\22\0\4\7\25\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\1\0\22\7\1\u014a"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\12\7\1\u014b\10\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\5\7\1\u014c\15\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\5\7\1\u014d\15\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\4\7\1\u014e\16\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\12\7\1\u014f\10\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\1\7\1\u0150\21\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\17\7\1\u0151\3\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\12\7\1\u0152\10\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\17\7\1\u0153\3\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\6\7\1\u0154\14\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\2\7\1\u0155\20\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\14\7\1\u0156\6\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\16\7\1\u0157\4\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\3\7\1\u0158\17\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\10\7\1\u0159\12\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\2\7\1\u015a\20\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\12\7\1\u015b\10\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\7\7\1\u015c\13\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\1\0\16\7\1\u015d\4\7"+
    "\1\0\4\7\22\0\4\7\25\0\3\7\1\0\2\7"+
    "\4\0\1\u015e\4\7\1\0\1\7\1\0\23\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\10\7\1\u015f\12\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\6\7\1\u0160\14\7\1\0"+
    "\4\7\22\0\4\7\25\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\1\0\12\7\1\u0161\10\7\1\0"+
    "\4\7\22\0\4\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22355];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\40\1\11\11\1\1\7\0"+
    "\1\11\4\1\2\0\1\11\6\1\4\11\41\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\7\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\7\0\13\1\2\11\45\1"+
    "\4\11\1\1\6\0\52\1\1\0\157\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[353];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 117: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 118: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 119: break;
          case 4: 
            { return INTEGER;
            } 
            // fall through
          case 120: break;
          case 5: 
            { return ID;
            } 
            // fall through
          case 121: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 122: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 123: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 124: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 125: break;
          case 10: 
            { return FLOAT;
            } 
            // fall through
          case 126: break;
          case 11: 
            { return LETTERC;
            } 
            // fall through
          case 127: break;
          case 12: 
            { return EQUAL;
            } 
            // fall through
          case 128: break;
          case 13: 
            { return LARROW;
            } 
            // fall through
          case 129: break;
          case 14: 
            { return RARROW;
            } 
            // fall through
          case 130: break;
          case 15: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 131: break;
          case 16: 
            { return AMPERSAND;
            } 
            // fall through
          case 132: break;
          case 17: 
            { return CARET;
            } 
            // fall through
          case 133: break;
          case 18: 
            { return PIPE;
            } 
            // fall through
          case 134: break;
          case 19: 
            { return PLUS;
            } 
            // fall through
          case 135: break;
          case 20: 
            { return PERCENT;
            } 
            // fall through
          case 136: break;
          case 21: 
            { return ASTERISK;
            } 
            // fall through
          case 137: break;
          case 22: 
            { return TILDE;
            } 
            // fall through
          case 138: break;
          case 23: 
            { return LBRACKET;
            } 
            // fall through
          case 139: break;
          case 24: 
            { return RBRACKET;
            } 
            // fall through
          case 140: break;
          case 25: 
            { return QUESTIONMARK;
            } 
            // fall through
          case 141: break;
          case 26: 
            { return SEMICOLON;
            } 
            // fall through
          case 142: break;
          case 27: 
            { return LPAREN;
            } 
            // fall through
          case 143: break;
          case 28: 
            { return RPAREN;
            } 
            // fall through
          case 144: break;
          case 29: 
            { return COMMA;
            } 
            // fall through
          case 145: break;
          case 30: 
            { return COLON;
            } 
            // fall through
          case 146: break;
          case 31: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 147: break;
          case 32: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 148: break;
          case 33: 
            { return DOT2;
            } 
            // fall through
          case 149: break;
          case 34: 
            { return DOTASTERISK;
            } 
            // fall through
          case 150: break;
          case 35: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 151: break;
          case 36: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 152: break;
          case 37: 
            { return MINUSRARROW;
            } 
            // fall through
          case 153: break;
          case 38: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 154: break;
          case 39: 
            { return OR;
            } 
            // fall through
          case 155: break;
          case 40: 
            { return IF;
            } 
            // fall through
          case 156: break;
          case 41: 
            { return FN;
            } 
            // fall through
          case 157: break;
          case 42: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 158: break;
          case 43: 
            { return EQUALRARROW;
            } 
            // fall through
          case 159: break;
          case 44: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 160: break;
          case 45: 
            { return LARROW2;
            } 
            // fall through
          case 161: break;
          case 46: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 162: break;
          case 47: 
            { return RARROW2;
            } 
            // fall through
          case 163: break;
          case 48: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 164: break;
          case 49: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 165: break;
          case 50: 
            { return CARETEQUAL;
            } 
            // fall through
          case 166: break;
          case 51: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 167: break;
          case 52: 
            { return PIPE2;
            } 
            // fall through
          case 168: break;
          case 53: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 169: break;
          case 54: 
            { return PLUS2;
            } 
            // fall through
          case 170: break;
          case 55: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 171: break;
          case 56: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 172: break;
          case 57: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 173: break;
          case 58: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 174: break;
          case 59: 
            { return ASTERISK2;
            } 
            // fall through
          case 175: break;
          case 60: 
            { return CHAR_LITERAL;
            } 
            // fall through
          case 176: break;
          case 61: 
            { return CONTAINER_DOC;
            } 
            // fall through
          case 177: break;
          case 62: 
            { return COMMENT;
            } 
            // fall through
          case 178: break;
          case 63: 
            { return DOT3;
            } 
            // fall through
          case 179: break;
          case 64: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 180: break;
          case 65: 
            { return TRY;
            } 
            // fall through
          case 181: break;
          case 66: 
            { return PUB;
            } 
            // fall through
          case 182: break;
          case 67: 
            { return AND;
            } 
            // fall through
          case 183: break;
          case 68: 
            { return ASM;
            } 
            // fall through
          case 184: break;
          case 69: 
            { return FOR;
            } 
            // fall through
          case 185: break;
          case 70: 
            { return VAR;
            } 
            // fall through
          case 186: break;
          case 71: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 187: break;
          case 72: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 188: break;
          case 73: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 189: break;
          case 74: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 190: break;
          case 75: 
            { return NULL;
            } 
            // fall through
          case 191: break;
          case 76: 
            { return TRUE;
            } 
            // fall through
          case 192: break;
          case 77: 
            { return TEST;
            } 
            // fall through
          case 193: break;
          case 78: 
            { return ENUM;
            } 
            // fall through
          case 194: break;
          case 79: 
            { return ELSE;
            } 
            // fall through
          case 195: break;
          case 80: 
            { return UNION;
            } 
            // fall through
          case 196: break;
          case 81: 
            { return BREAK;
            } 
            // fall through
          case 197: break;
          case 82: 
            { return CONST;
            } 
            // fall through
          case 198: break;
          case 83: 
            { return CATCH;
            } 
            // fall through
          case 199: break;
          case 84: 
            { return ASYNC;
            } 
            // fall through
          case 200: break;
          case 85: 
            { return ALIGN;
            } 
            // fall through
          case 201: break;
          case 86: 
            { return ERROR;
            } 
            // fall through
          case 202: break;
          case 87: 
            { return FALSE;
            } 
            // fall through
          case 203: break;
          case 88: 
            { return DEFER;
            } 
            // fall through
          case 204: break;
          case 89: 
            { return WHILE;
            } 
            // fall through
          case 205: break;
          case 90: 
            { return AWAIT;
            } 
            // fall through
          case 206: break;
          case 91: 
            { return ORELSE;
            } 
            // fall through
          case 207: break;
          case 92: 
            { return OPAQUE;
            } 
            // fall through
          case 208: break;
          case 93: 
            { return STRUCT;
            } 
            // fall through
          case 209: break;
          case 94: 
            { return SWITCH;
            } 
            // fall through
          case 210: break;
          case 95: 
            { return RESUME;
            } 
            // fall through
          case 211: break;
          case 96: 
            { return RETURN;
            } 
            // fall through
          case 212: break;
          case 97: 
            { return PACKED;
            } 
            // fall through
          case 213: break;
          case 98: 
            { return EXTERN;
            } 
            // fall through
          case 214: break;
          case 99: 
            { return EXPORT;
            } 
            // fall through
          case 215: break;
          case 100: 
            { return INLINE;
            } 
            // fall through
          case 216: break;
          case 101: 
            { return SUSPEND;
            } 
            // fall through
          case 217: break;
          case 102: 
            { return ANY_TYPE;
            } 
            // fall through
          case 218: break;
          case 103: 
            { return NOINLINE;
            } 
            // fall through
          case 219: break;
          case 104: 
            { return CONTINUE;
            } 
            // fall through
          case 220: break;
          case 105: 
            { return COMPTIME;
            } 
            // fall through
          case 221: break;
          case 106: 
            { return CALLCONV;
            } 
            // fall through
          case 222: break;
          case 107: 
            { return ANYFRAME;
            } 
            // fall through
          case 223: break;
          case 108: 
            { return ERRDEFER;
            } 
            // fall through
          case 224: break;
          case 109: 
            { return VOLATILE;
            } 
            // fall through
          case 225: break;
          case 110: 
            { return UNDEFINED;
            } 
            // fall through
          case 226: break;
          case 111: 
            { return NOSUSPEND;
            } 
            // fall through
          case 227: break;
          case 112: 
            { return ALLOWZERO;
            } 
            // fall through
          case 228: break;
          case 113: 
            { return UNREACHABLE;
            } 
            // fall through
          case 229: break;
          case 114: 
            { return THREAD_LOCAL;
            } 
            // fall through
          case 230: break;
          case 115: 
            { return LINKSECTION;
            } 
            // fall through
          case 231: break;
          case 116: 
            { return USING_NAME_SPACE;
            } 
            // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
