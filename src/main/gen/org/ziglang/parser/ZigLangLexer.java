/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZigLangLexer.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\46\1\15\2\0\1\54\1\47\1\0\1\64\1\65\1\55\1\52"+
    "\1\66\1\53\1\57\1\4\12\6\1\67\1\63\1\44\1\30\1\45\1\62\1\0\1\70\7\5\1\72\12"+
    "\5\1\73\2\5\1\71\3\5\1\60\1\7\1\61\1\50\1\5\1\0\1\27\1\17\1\22\1\31\1\32\1"+
    "\20\1\36\1\35\1\33\1\5\1\40\1\34\1\37\1\21\1\23\1\16\1\5\1\14\1\24\1\25\1"+
    "\11\1\26\1\42\1\10\1\41\1\43\1\12\1\51\1\13\1\56\6\0\1\1\32\0\1\3\337\0\1"+
    "\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\4\1\1\4\4\1\10\5\4\1\11\5\4"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\4\1\0\1\36\2\4"+
    "\2\0\1\37\2\4\1\40\4\4\1\41\12\4\1\42"+
    "\1\43\4\4\1\44\3\4\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\4\1\0\1\73\1\74\3\4\1\37"+
    "\1\75\1\4\1\76\11\4\1\77\3\4\1\100\1\101"+
    "\1\4\1\102\13\4\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\17\4\1\111\13\4\1\112\7\4\1\113\2\4"+
    "\1\114\2\4\1\115\10\4\1\116\1\117\1\4\1\120"+
    "\5\4\1\121\1\122\1\4\1\123\1\124\5\4\1\125"+
    "\1\4\1\126\5\4\1\127\1\130\1\4\1\131\7\4"+
    "\1\132\3\4\1\133\5\4\1\134\1\135\1\136\1\137"+
    "\1\4\1\140\1\141\1\4\1\142\2\4\1\143\1\4"+
    "\1\144\5\4\1\145\1\146\2\4\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\74"+
    "\0\74\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\74\0\u0834\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\u0870"+
    "\0\u08ac\0\74\0\u08e8\0\u0924\0\u01e0\0\u0960\0\74\0\u099c"+
    "\0\u09d8\0\360\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\74\0\74\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\360"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\74\0\u0f3c\0\74\0\u0f78\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u0fb4\0\74"+
    "\0\74\0\u0ff0\0\74\0\74\0\u102c\0\74\0\74\0\u1068"+
    "\0\74\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u01e0\0\360\0\u1248\0\360\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\360\0\u14a0\0\u14dc"+
    "\0\u1518\0\360\0\360\0\u1554\0\360\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\360\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\360\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\360\0\u1fe0\0\u201c\0\360\0\u2058\0\u2094\0\360"+
    "\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274"+
    "\0\360\0\360\0\u22b0\0\360\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\360\0\360\0\u2418\0\360\0\360\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\360\0\u2580\0\360\0\u25bc\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\360\0\360\0\u26e8\0\360\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\360\0\u28c8"+
    "\0\u2904\0\u2940\0\360\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\360\0\360\0\360\0\360\0\u2aa8\0\360\0\360\0\u2ae4"+
    "\0\360\0\u2b20\0\u2b5c\0\360\0\u2b98\0\360\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\360\0\360\0\u2d00\0\u2d3c\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\5\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\5\5\1\33\1\5\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\3\5\75\0\3\3\74\0\1\61"+
    "\23\0\1\62\50\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\12\5\1\0\13\5\24\0\4\5\6\0\1\6"+
    "\72\0\2\5\1\0\2\5\2\0\1\5\1\0\6\5"+
    "\1\63\3\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\1\5"+
    "\1\64\11\5\24\0\4\5\2\65\1\0\4\65\1\66"+
    "\5\65\1\67\56\65\5\0\2\5\1\0\1\5\1\70"+
    "\2\0\1\5\1\0\12\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\71\1\0\12\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\3\5\1\72\1\5\1\73\4\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\5\5\1\74\4\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\5\5\1\75\3\5\1\76\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\77\1\0"+
    "\12\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\1\5\1\100\2\0\1\5\1\0\12\5\1\0\11\5"+
    "\1\101\1\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\102\1\0\12\5\1\0\1\5\1\103\2\5"+
    "\1\104\6\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\5\5\1\105\3\5\1\106\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\3\5\1\107\2\5\1\110\3\5\1\0"+
    "\3\5\1\111\7\5\24\0\4\5\30\0\1\112\14\0"+
    "\1\113\33\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\12\5\1\0\1\5\1\114\11\5\24\0\4\5\5\0"+
    "\2\5\1\0\1\115\1\5\2\0\1\116\1\0\12\5"+
    "\1\0\3\5\1\117\7\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\2\5\1\120\1\121"+
    "\6\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\2\5\1\122"+
    "\10\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\4\5\1\123\6\5\24\0"+
    "\4\5\30\0\1\124\13\0\1\125\57\0\1\126\14\0"+
    "\1\127\56\0\1\130\73\0\1\131\73\0\1\132\73\0"+
    "\1\133\20\0\1\134\52\0\1\135\21\0\1\136\1\0"+
    "\1\137\47\0\1\140\14\0\1\141\6\0\1\142\47\0"+
    "\1\143\73\0\1\144\23\0\1\145\1\146\73\0\1\147"+
    "\1\0\1\150\2\0\1\151\16\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\13\5\24\0\1\5"+
    "\1\152\2\5\1\153\2\154\1\153\1\155\67\153\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\2\5\1\156\10\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\6\5\1\157\1\160\2\5"+
    "\1\0\13\5\24\0\4\5\2\65\1\0\4\65\1\66"+
    "\5\65\1\161\56\65\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\1\5\1\162\10\5\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\12\5\1\0\1\5\1\163\11\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\164\1\0\12\5\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\6\5\1\165\3\5\1\0\2\5\1\166"+
    "\10\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\3\5\1\167\6\5\1\0\6\5\1\170"+
    "\4\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\7\5\1\171\2\5\1\0\3\5\1\172"+
    "\7\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\1\5\1\173\11\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\6\5\1\174\3\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\2\5\1\175\10\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\10\5\1\176"+
    "\2\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\6\5\1\177\3\5\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\200\1\0"+
    "\12\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\3\5\1\201"+
    "\7\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\202\1\0\12\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\1\203\7\5\1\204\2\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\6\5"+
    "\1\205\1\5\1\206\2\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\2\5"+
    "\1\207\1\210\7\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\2\5\1\211\7\5\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\1\212\6\5\1\213\2\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\214"+
    "\1\0\12\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\6\5\1\215\3\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\3\5\1\216\7\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\3\5\1\217\6\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\12\5"+
    "\1\0\2\5\1\220\10\5\24\0\4\5\30\0\1\221"+
    "\73\0\1\222\73\0\1\223\73\0\1\224\73\0\1\225"+
    "\122\0\1\226\21\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\12\5\1\0\13\5\24\0\1\227\3\5\1\153"+
    "\2\154\71\153\74\154\1\155\2\154\71\155\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\3\5\1\230\6\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\1\5"+
    "\1\231\2\0\1\5\1\0\12\5\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\1\5\1\232\2\0\1\5"+
    "\1\0\12\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\11\5\1\233\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\1\5\1\234"+
    "\2\0\1\5\1\0\12\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\3\5"+
    "\1\235\6\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\6\5\1\236\1\237"+
    "\2\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\1\240\11\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\4\5\1\241\5\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\12\5"+
    "\1\0\3\5\1\242\7\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\3\5"+
    "\1\243\7\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\1\244\11\5\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\7\5\1\245\2\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\7\5\1\246"+
    "\2\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\1\5\1\247"+
    "\11\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\11\5\1\250\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\2\5"+
    "\1\251\4\5\1\252\2\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\3\5"+
    "\1\253\6\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\5\5"+
    "\1\254\5\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\5\5\1\255\4\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\12\5\1\0\1\5\1\256\11\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\5\5"+
    "\1\257\4\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\1\5"+
    "\1\260\11\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\1\261\12\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\12\5\1\0\1\5\1\262\11\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\2\5\1\263\10\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\7\5\1\264"+
    "\3\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\3\5\1\265\7\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\12\5\1\0\13\5\24\0\2\5\1\266\1\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\5\5\1\267\5\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\6\5\1\270"+
    "\4\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\271\1\0\12\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\7\5\1\272\3\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\6\5\1\273\3\5\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\3\5\1\274\7\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\7\5\1\275\2\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\2\5\1\276\10\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\7\5\1\277\2\5\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\4\5\1\300\6\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\4\5\1\301\5\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\6\5\1\302"+
    "\3\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\1\5\1\303"+
    "\11\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\4\5\1\304\5\5\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\11\5\1\305\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\7\5\1\306\2\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\307\1\0\12\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\12\5"+
    "\1\0\10\5\1\310\2\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\4\5\1\311\5\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\3\5\1\312\6\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\12\5\1\0\11\5\1\313\1\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\314\1\0\12\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\315\1\0\12\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\316\1\0\12\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\1\5\1\317\11\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\3\5\1\320\6\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\6\5"+
    "\1\321\3\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\1\5"+
    "\1\322\11\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\13\5\24\0\3\5"+
    "\1\323\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\3\5\1\324\6\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\1\5\1\325\11\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\3\5\1\326\6\5\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\1\327\11\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\12\5"+
    "\1\0\2\5\1\330\10\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\3\5\1\331\6\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\2\5\1\332\10\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\5\5\1\333\4\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\12\5"+
    "\1\0\1\5\1\334\11\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\3\5\1\335\6\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\4\5\1\336\6\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\12\5\1\0\1\337\12\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\2\5\1\340\10\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\11\5\1\341\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\1\342\11\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\12\5\1\343\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\7\5\1\344\2\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\3\5\1\345\6\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\2\5"+
    "\1\346\7\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\1\5"+
    "\1\347\11\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\1\5\1\350\11\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\11\5\1\351\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\1\5\1\352\11\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\3\5\1\353\6\5\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\1\5\1\354"+
    "\2\0\1\5\1\0\12\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\12\5"+
    "\1\0\6\5\1\355\4\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\3\5\1\356\6\5"+
    "\1\0\13\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\12\5\1\0\1\357\12\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\12\5\1\0\3\5\1\360\7\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\3\5\1\361\7\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\6\5\1\362"+
    "\4\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\1\5\1\363\11\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\12\5\1\0\1\5\1\364\11\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\1\5\1\365\11\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\4\5\1\366\5\5\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\6\5\1\367\4\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\3\5\1\370\6\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\1\5\1\371\11\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\1\5\1\372"+
    "\11\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\1\5\1\373\11\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\10\5\1\374\1\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\5\5\1\375"+
    "\4\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\1\5\1\376"+
    "\11\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\12\5\1\0\1\5\1\377\11\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\u0100\1\0"+
    "\12\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\u0101\1\0\12\5\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\7\5\1\u0102\2\5\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\12\5\1\0"+
    "\1\5\1\u0103\11\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\12\5\1\0\1\u0104\12\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\4\5\1\u0105\5\5\1\0\13\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\5\5"+
    "\1\u0106\4\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\12\5\1\0\2\5"+
    "\1\u0107\10\5\24\0\4\5\5\0\2\5\1\0\2\5"+
    "\2\0\1\5\1\0\6\5\1\u0108\3\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\11\5\1\u0109\1\0\13\5\24\0\4\5\5\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\5\5\1\u010a"+
    "\4\5\1\0\13\5\24\0\4\5\5\0\2\5\1\0"+
    "\2\5\2\0\1\5\1\0\1\u010b\11\5\1\0\13\5"+
    "\24\0\4\5\5\0\2\5\1\0\2\5\2\0\1\5"+
    "\1\0\12\5\1\0\3\5\1\u010c\7\5\24\0\4\5"+
    "\5\0\2\5\1\0\2\5\2\0\1\5\1\0\3\5"+
    "\1\u010d\6\5\1\0\13\5\24\0\4\5\5\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\11\5\1\u010e\1\0"+
    "\13\5\24\0\4\5\5\0\2\5\1\0\2\5\2\0"+
    "\1\5\1\0\4\5\1\u010f\5\5\1\0\13\5\24\0"+
    "\4\5\5\0\2\5\1\0\2\5\2\0\1\5\1\0"+
    "\12\5\1\0\1\5\1\u0110\11\5\24\0\4\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\34\1\1\11\1\1\10\11"+
    "\1\1\1\0\1\11\2\1\2\0\1\11\22\1\2\11"+
    "\10\1\1\11\1\1\1\11\1\1\7\11\1\1\2\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\1\1\1\0"+
    "\45\1\6\11\172\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 104: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 105: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 106: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 107: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 108: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 109: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 110: break;
          case 8: 
            { return LETTERC;
            } 
            // fall through
          case 111: break;
          case 9: 
            { return EQUAL;
            } 
            // fall through
          case 112: break;
          case 10: 
            { return LARROW;
            } 
            // fall through
          case 113: break;
          case 11: 
            { return RARROW;
            } 
            // fall through
          case 114: break;
          case 12: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 115: break;
          case 13: 
            { return AMPERSAND;
            } 
            // fall through
          case 116: break;
          case 14: 
            { return CARET;
            } 
            // fall through
          case 117: break;
          case 15: 
            { return PIPE;
            } 
            // fall through
          case 118: break;
          case 16: 
            { return PLUS;
            } 
            // fall through
          case 119: break;
          case 17: 
            { return MINUS;
            } 
            // fall through
          case 120: break;
          case 18: 
            { return PERCENT;
            } 
            // fall through
          case 121: break;
          case 19: 
            { return ASTERISK;
            } 
            // fall through
          case 122: break;
          case 20: 
            { return TILDE;
            } 
            // fall through
          case 123: break;
          case 21: 
            { return DOT;
            } 
            // fall through
          case 124: break;
          case 22: 
            { return LBRACKET;
            } 
            // fall through
          case 125: break;
          case 23: 
            { return RBRACKET;
            } 
            // fall through
          case 126: break;
          case 24: 
            { return QUESTIONMARK;
            } 
            // fall through
          case 127: break;
          case 25: 
            { return SEMICOLON;
            } 
            // fall through
          case 128: break;
          case 26: 
            { return LPAREN;
            } 
            // fall through
          case 129: break;
          case 27: 
            { return RPAREN;
            } 
            // fall through
          case 130: break;
          case 28: 
            { return COMMA;
            } 
            // fall through
          case 131: break;
          case 29: 
            { return COLON;
            } 
            // fall through
          case 132: break;
          case 30: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 133: break;
          case 31: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 134: break;
          case 32: 
            { return FN;
            } 
            // fall through
          case 135: break;
          case 33: 
            { return OR;
            } 
            // fall through
          case 136: break;
          case 34: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 137: break;
          case 35: 
            { return EQUALRARROW;
            } 
            // fall through
          case 138: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 139: break;
          case 37: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 140: break;
          case 38: 
            { return LARROW2;
            } 
            // fall through
          case 141: break;
          case 39: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 142: break;
          case 40: 
            { return RARROW2;
            } 
            // fall through
          case 143: break;
          case 41: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 144: break;
          case 42: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 145: break;
          case 43: 
            { return CARETEQUAL;
            } 
            // fall through
          case 146: break;
          case 44: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 147: break;
          case 45: 
            { return PIPE2;
            } 
            // fall through
          case 148: break;
          case 46: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 149: break;
          case 47: 
            { return PLUS2;
            } 
            // fall through
          case 150: break;
          case 48: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 151: break;
          case 49: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 152: break;
          case 50: 
            { return MINUSRARROW;
            } 
            // fall through
          case 153: break;
          case 51: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 154: break;
          case 52: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 155: break;
          case 53: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 156: break;
          case 54: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 157: break;
          case 55: 
            { return ASTERISK2;
            } 
            // fall through
          case 158: break;
          case 56: 
            { return DOTASTERISK;
            } 
            // fall through
          case 159: break;
          case 57: 
            { return DOT2;
            } 
            // fall through
          case 160: break;
          case 58: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 161: break;
          case 59: 
            { return CONTAINER_DOC;
            } 
            // fall through
          case 162: break;
          case 60: 
            { return COMMENT;
            } 
            // fall through
          case 163: break;
          case 61: 
            { return PUB;
            } 
            // fall through
          case 164: break;
          case 62: 
            { return FOR;
            } 
            // fall through
          case 165: break;
          case 63: 
            { return TRY;
            } 
            // fall through
          case 166: break;
          case 64: 
            { return VAR;
            } 
            // fall through
          case 167: break;
          case 65: 
            { return AND;
            } 
            // fall through
          case 168: break;
          case 66: 
            { return ASM;
            } 
            // fall through
          case 169: break;
          case 67: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 170: break;
          case 68: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 171: break;
          case 69: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 172: break;
          case 70: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 173: break;
          case 71: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 174: break;
          case 72: 
            { return DOT3;
            } 
            // fall through
          case 175: break;
          case 73: 
            { return TEST;
            } 
            // fall through
          case 176: break;
          case 74: 
            { return ELSE;
            } 
            // fall through
          case 177: break;
          case 75: 
            { return BREAK;
            } 
            // fall through
          case 178: break;
          case 76: 
            { return CONST;
            } 
            // fall through
          case 179: break;
          case 77: 
            { return CATCH;
            } 
            // fall through
          case 180: break;
          case 78: 
            { return ASYNC;
            } 
            // fall through
          case 181: break;
          case 79: 
            { return ALIGN;
            } 
            // fall through
          case 182: break;
          case 80: 
            { return DEFER;
            } 
            // fall through
          case 183: break;
          case 81: 
            { return WHILE;
            } 
            // fall through
          case 184: break;
          case 82: 
            { return AWAIT;
            } 
            // fall through
          case 185: break;
          case 83: 
            { return RESUME;
            } 
            // fall through
          case 186: break;
          case 84: 
            { return RETURN;
            } 
            // fall through
          case 187: break;
          case 85: 
            { return ORELSE;
            } 
            // fall through
          case 188: break;
          case 86: 
            { return SWITCH;
            } 
            // fall through
          case 189: break;
          case 87: 
            { return EXPORT;
            } 
            // fall through
          case 190: break;
          case 88: 
            { return EXTERN;
            } 
            // fall through
          case 191: break;
          case 89: 
            { return INLINE;
            } 
            // fall through
          case 192: break;
          case 90: 
            { return SUSPEND;
            } 
            // fall through
          case 193: break;
          case 91: 
            { return ANY_TYPE;
            } 
            // fall through
          case 194: break;
          case 92: 
            { return NOINLINE;
            } 
            // fall through
          case 195: break;
          case 93: 
            { return CONTINUE;
            } 
            // fall through
          case 196: break;
          case 94: 
            { return COMPTIME;
            } 
            // fall through
          case 197: break;
          case 95: 
            { return CALLCONV;
            } 
            // fall through
          case 198: break;
          case 96: 
            { return VOLATILE;
            } 
            // fall through
          case 199: break;
          case 97: 
            { return ANYFRAME;
            } 
            // fall through
          case 200: break;
          case 98: 
            { return ERRDEFER;
            } 
            // fall through
          case 201: break;
          case 99: 
            { return NOSUSPEND;
            } 
            // fall through
          case 202: break;
          case 100: 
            { return ALLOWZERO;
            } 
            // fall through
          case 203: break;
          case 101: 
            { return THREAD_LOCAL;
            } 
            // fall through
          case 204: break;
          case 102: 
            { return LINKSECTION;
            } 
            // fall through
          case 205: break;
          case 103: 
            { return USING_NAME_SPACE;
            } 
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
