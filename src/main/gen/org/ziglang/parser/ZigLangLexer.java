/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZigLangLexer.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\37\1\2\3\3\22\20\1\23\1\25\1\36\2\20\1\106\1\102\1\6\1\115\1\116"+
    "\1\107\1\105\1\117\1\47\1\45\1\24\1\44\1\41\6\43\2\26\1\120\1\114\1\100\1"+
    "\73\1\101\1\113\1\20\4\30\1\50\1\30\11\27\1\46\12\27\1\111\1\31\1\112\1\103"+
    "\1\42\1\20\1\60\1\51\1\56\1\67\1\62\1\65\1\74\1\70\1\64\1\27\1\71\1\66\1\63"+
    "\1\40\1\52\1\57\1\61\1\55\1\53\1\54\1\33\1\72\1\76\1\32\1\75\1\77\1\34\1\104"+
    "\1\35\1\110\1\20\5\10\1\5\12\10\20\15\1\22\37\4\2\0\36\17\1\16\14\13\1\14"+
    "\2\13\1\12\3\11\1\7\213\0\1\21\177\0\13\21\35\0\2\1\5\0\1\21\57\0\1\21\40"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\2\6"+
    "\1\7\1\10\1\1\1\6\1\5\1\11\1\12\16\6"+
    "\1\13\1\6\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\6\0\1\35\1\36\1\37\2\0"+
    "\2\6\2\0\1\40\2\6\3\0\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\6\1\47\25\6\1\50\1\51"+
    "\6\6\1\52\1\53\1\6\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\6\0\1\35\1\74\1\75"+
    "\2\76\1\0\4\6\1\40\4\6\3\5\1\77\1\100"+
    "\7\6\1\101\10\6\1\102\1\6\1\103\1\6\1\104"+
    "\12\6\1\105\4\6\1\106\1\6\1\107\1\110\1\111"+
    "\1\112\6\0\4\6\1\113\3\6\1\0\6\6\1\114"+
    "\1\115\21\6\1\116\2\6\1\117\6\6\1\0\1\6"+
    "\1\120\5\6\1\76\1\121\10\6\1\122\2\6\1\123"+
    "\4\6\1\124\1\125\1\6\1\126\2\6\1\127\2\6"+
    "\1\130\1\6\1\131\1\6\1\132\6\6\1\133\1\134"+
    "\1\6\1\135\1\136\1\6\1\137\1\140\3\6\1\141"+
    "\3\6\1\142\1\143\1\6\1\144\6\6\1\145\1\6"+
    "\1\146\4\6\1\147\11\6\1\150\1\6\1\151\1\152"+
    "\1\153\1\154\1\6\1\155\1\6\1\156\1\6\1\157"+
    "\1\6\1\160\1\6\1\161\5\6\1\162\1\6\1\163"+
    "\1\164\2\6\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\u0195\0\u01e6\0\u0237"+
    "\0\u0288\0\121\0\121\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d"+
    "\0\u046e\0\u04bf\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654\0\u06a5"+
    "\0\u06f6\0\u0747\0\u0798\0\u07e9\0\u083a\0\u088b\0\u08dc\0\u092d"+
    "\0\u097e\0\u09cf\0\u0a20\0\u0a71\0\u0ac2\0\u0b13\0\u0b64\0\u0bb5"+
    "\0\121\0\121\0\121\0\121\0\121\0\121\0\121\0\121"+
    "\0\121\0\u0c06\0\u0c57\0\u0ca8\0\u0cf9\0\u0d4a\0\u0d9b\0\u0dec"+
    "\0\121\0\121\0\u0e3d\0\u0e8e\0\u0edf\0\u0f30\0\u02d9\0\u0f81"+
    "\0\121\0\u0fd2\0\u1023\0\u1074\0\u10c5\0\u1116\0\u1167\0\121"+
    "\0\121\0\121\0\121\0\u11b8\0\u1209\0\u125a\0\u12ab\0\u12fc"+
    "\0\u134d\0\u139e\0\u13ef\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584"+
    "\0\u15d5\0\u1626\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c"+
    "\0\u185d\0\u18ae\0\u18ff\0\u0237\0\u0237\0\u1950\0\u19a1\0\u19f2"+
    "\0\u1a43\0\u1a94\0\u1ae5\0\121\0\121\0\u1b36\0\121\0\u1b87"+
    "\0\121\0\u1bd8\0\121\0\121\0\121\0\121\0\121\0\121"+
    "\0\u1c29\0\121\0\121\0\u1c7a\0\121\0\121\0\u1ccb\0\u1d1c"+
    "\0\u1d6d\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1\0\u1f02\0\u1f53\0\u1fa4"+
    "\0\u1ff5\0\u2046\0\u2097\0\u20e8\0\u2139\0\u218a\0\u02d9\0\u21db"+
    "\0\u222c\0\u227d\0\u22ce\0\u231f\0\u2370\0\u23c1\0\121\0\121"+
    "\0\u2412\0\u2463\0\u24b4\0\u2505\0\u2556\0\u25a7\0\u25f8\0\u0237"+
    "\0\u2649\0\u269a\0\u26eb\0\u273c\0\u278d\0\u27de\0\u282f\0\u2880"+
    "\0\u0237\0\u28d1\0\u0237\0\u2922\0\u0237\0\u2973\0\u29c4\0\u2a15"+
    "\0\u2a66\0\u2ab7\0\u2b08\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c\0\u0237"+
    "\0\u2c9d\0\u2cee\0\u2d3f\0\u2d90\0\u0237\0\u2de1\0\121\0\121"+
    "\0\121\0\121\0\u2e32\0\u2e83\0\u2ed4\0\u2f25\0\u2f76\0\u2fc7"+
    "\0\u3018\0\u3069\0\u30ba\0\u310b\0\u0237\0\u315c\0\u31ad\0\u31fe"+
    "\0\u324f\0\u32a0\0\u32f1\0\u3342\0\u3393\0\u33e4\0\u3435\0\u0237"+
    "\0\u0237\0\u3486\0\u34d7\0\u3528\0\u3579\0\u35ca\0\u361b\0\u366c"+
    "\0\u36bd\0\u370e\0\u375f\0\u37b0\0\u3801\0\u3852\0\u38a3\0\u38f4"+
    "\0\u3945\0\u3996\0\u0237\0\u39e7\0\u3a38\0\u0237\0\u3a89\0\u3ada"+
    "\0\u3b2b\0\u3b7c\0\u3bcd\0\u3c1e\0\u3c6f\0\u3cc0\0\u0237\0\u3d11"+
    "\0\u3d62\0\u3db3\0\u3e04\0\u3e55\0\u3ea6\0\u0237\0\u3ef7\0\u3f48"+
    "\0\u3f99\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e\0\u0237\0\u417f"+
    "\0\u41d0\0\u0237\0\u4221\0\u4272\0\u42c3\0\u4314\0\u0237\0\u0237"+
    "\0\u4365\0\u0237\0\u43b6\0\u4407\0\u0237\0\u4458\0\u44a9\0\u0237"+
    "\0\u44fa\0\u0237\0\u454b\0\u0237\0\u459c\0\u45ed\0\u463e\0\u468f"+
    "\0\u46e0\0\u4731\0\u0237\0\u0237\0\u4782\0\u0237\0\u0237\0\u47d3"+
    "\0\u0237\0\u0237\0\u4824\0\u4875\0\u48c6\0\u0237\0\u4917\0\u4968"+
    "\0\u49b9\0\u0237\0\u0237\0\u4a0a\0\u0237\0\u4a5b\0\u4aac\0\u4afd"+
    "\0\u4b4e\0\u4b9f\0\u4bf0\0\u0237\0\u4c41\0\u0237\0\u4c92\0\u4ce3"+
    "\0\u4d34\0\u4d85\0\u0237\0\u4dd6\0\u4e27\0\u4e78\0\u4ec9\0\u4f1a"+
    "\0\u4f6b\0\u4fbc\0\u500d\0\u505e\0\u0237\0\u50af\0\u0237\0\u0237"+
    "\0\u0237\0\u0237\0\u5100\0\u0237\0\u5151\0\u0237\0\u51a2\0\u0237"+
    "\0\u51f3\0\u0237\0\u5244\0\u0237\0\u5295\0\u52e6\0\u5337\0\u5388"+
    "\0\u53d9\0\u0237\0\u542a\0\u0237\0\u0237\0\u547b\0\u54cc\0\u0237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\3\1\4\12\2\3\3\1\5"+
    "\1\6\1\7\2\10\1\2\1\10\1\11\1\12\1\13"+
    "\1\14\1\3\1\15\1\7\1\10\1\7\1\16\1\17"+
    "\1\10\1\20\1\10\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\10\1\31\1\10\1\32\1\33"+
    "\1\34\1\35\2\10\1\36\1\37\2\10\1\40\1\10"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\122\0\3\3\1\0\1\3\13\0\3\3\13\0"+
    "\1\3\64\0\1\62\2\0\1\63\2\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\62\2\0\6\62\1\67\67\62"+
    "\24\0\1\70\46\0\1\71\120\0\1\72\53\0\1\7"+
    "\12\0\4\7\1\73\2\0\1\74\11\0\1\74\64\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\23\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\1\75\4\10\1\0\1\10\1\0\3\10\1\76\17\10"+
    "\1\0\4\10\21\0\2\77\1\0\26\77\1\100\4\77"+
    "\1\101\62\77\26\0\3\10\1\0\1\10\1\102\4\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\103\20\10\1\0"+
    "\4\10\47\0\1\7\3\0\1\104\6\0\4\7\1\73"+
    "\2\0\1\74\1\105\1\106\7\0\1\74\103\0\1\107"+
    "\41\0\1\110\3\0\1\111\100\0\1\112\5\0\1\113"+
    "\4\0\1\114\40\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\5\10\1\115\15\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\116\1\10\1\117\13\10\1\0\4\10"+
    "\47\0\3\10\1\0\1\10\1\120\4\0\5\10\1\0"+
    "\1\10\1\0\4\10\1\121\16\10\1\0\2\10\1\122"+
    "\1\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\5\10\1\123\4\10\1\124\5\10\1\125"+
    "\2\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\12\10\1\126\10\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\127\5\10\1\130\12\10\1\0"+
    "\4\10\47\0\3\10\1\0\1\10\1\131\4\0\5\10"+
    "\1\0\1\10\1\0\10\10\1\132\12\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\1\133\4\10\1\0"+
    "\1\10\1\0\3\10\1\134\12\10\1\135\4\10\1\0"+
    "\2\10\1\136\1\10\47\0\3\10\1\0\1\137\1\10"+
    "\4\0\1\140\4\10\1\0\1\10\1\0\5\10\1\141"+
    "\10\10\1\142\4\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\1\143\4\10\1\0\1\10\1\0\15\10"+
    "\1\144\5\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\1\145\4\10\1\0\1\10\1\0\2\10\1\146"+
    "\5\10\1\147\12\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\14\10\1\150"+
    "\6\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\12\10\1\151\10\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\152\5\10\1\153\12\10\1\0"+
    "\4\10\114\0\1\154\5\0\1\155\45\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\20\10\1\156"+
    "\2\10\1\0\4\10\114\0\1\157\4\0\1\160\113\0"+
    "\1\161\5\0\1\162\112\0\1\163\120\0\1\164\120\0"+
    "\1\165\10\0\1\166\107\0\1\167\11\0\1\170\1\171"+
    "\105\0\1\172\120\0\1\173\12\0\1\174\1\175\17\0"+
    "\1\176\121\0\1\177\2\0\1\200\1\0\1\201\1\0"+
    "\1\202\106\0\2\65\2\0\1\65\4\0\1\65\4\0"+
    "\1\65\102\0\2\66\2\0\1\66\4\0\1\66\4\0"+
    "\1\66\102\0\2\62\2\0\1\62\4\0\1\62\4\0"+
    "\1\62\104\0\1\62\23\0\1\203\1\204\2\0\3\62"+
    "\14\0\1\62\43\0\2\205\1\0\21\205\1\206\1\207"+
    "\73\205\26\0\1\210\12\0\1\210\1\0\2\210\102\0"+
    "\1\211\12\0\1\211\1\0\2\211\2\0\1\212\35\0"+
    "\1\212\41\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\5\10\1\213\6\10\1\214\2\10\1\215"+
    "\3\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\14\10\1\216\6\10\1\0"+
    "\4\10\21\0\2\77\1\0\26\77\1\100\4\77\1\217"+
    "\62\77\26\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\16\10\1\220\4\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\3\10\1\221\4\10\1\222\3\10\1\223\6\10\1\0"+
    "\4\10\47\0\1\224\1\0\1\224\10\0\1\224\1\0"+
    "\2\224\3\0\2\224\4\0\1\224\1\0\1\224\1\0"+
    "\1\224\2\0\1\224\1\0\1\224\72\0\1\225\2\0"+
    "\1\225\115\0\1\226\1\0\2\226\121\0\1\227\146\0"+
    "\1\230\53\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\12\10\1\231\10\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\232\10\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\10\10\1\233"+
    "\12\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\3\10\1\234\17\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\5\10\1\235\15\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\14\10\1\236\6\10\1\0\4\10\47\0\3\10\1\0"+
    "\1\10\1\237\4\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\0\1\10\1\240\2\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\3\10\1\241\17\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\5\10\1\242\15\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\3\10\1\243\1\244\16\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\1\245\4\10\1\0\1\10"+
    "\1\0\13\10\1\246\7\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\247\11\10\1\250\4\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\251\21\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\6\10\1\252\14\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\17\10\1\253\3\10\1\0\1\10"+
    "\1\254\2\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\13\10\1\255\7\10\1\0\1\10"+
    "\1\256\2\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\14\10\1\257\1\10\1\260\4\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\10\10\1\261\12\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\4\10\1\262\2\10\1\263\13\10\1\0\4\10"+
    "\47\0\3\10\1\0\1\10\1\264\4\0\5\10\1\0"+
    "\1\10\1\0\23\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\5\10\1\265"+
    "\15\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\3\10\1\266\17\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\16\10\1\267\4\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\5\10\1\270\15\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\16\10\1\271"+
    "\4\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\1\272\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\15\10\1\273\5\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\16\10"+
    "\1\274\4\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\5\10\1\275\15\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\14\10\1\276\6\10\1\0\4\10"+
    "\114\0\1\277\120\0\1\300\120\0\1\301\120\0\1\302"+
    "\33\0\1\303\120\0\1\304\120\0\1\305\120\0\1\306"+
    "\140\0\1\307\1\0\1\307\10\0\1\307\1\0\2\307"+
    "\3\0\2\307\4\0\1\307\1\0\1\307\1\0\1\307"+
    "\2\0\1\307\1\0\1\307\65\0\1\310\64\0\2\205"+
    "\1\0\116\205\1\206\1\205\1\0\1\205\1\206\1\205"+
    "\113\206\1\207\1\205\1\0\1\205\1\207\1\205\113\207"+
    "\26\0\1\210\12\0\4\210\3\0\1\74\11\0\1\74"+
    "\64\0\1\211\12\0\4\211\102\0\1\211\12\0\1\211"+
    "\1\0\2\211\102\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\311\10\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\312\20\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\313\10\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\1\314\4\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\16\10\1\315\4\10\1\0\4\10\47\0"+
    "\3\10\1\0\1\10\1\316\4\0\5\10\1\0\1\10"+
    "\1\0\23\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\16\10\1\317\4\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\1\320"+
    "\4\10\1\0\1\10\1\0\23\10\1\0\4\10\47\0"+
    "\1\224\1\0\1\224\10\0\4\224\1\321\1\74\1\0"+
    "\2\224\4\0\1\224\1\74\1\224\1\0\1\224\2\0"+
    "\1\224\1\0\1\224\72\0\2\225\1\0\1\225\115\0"+
    "\4\226\102\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\10\10\1\322\12\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\16\10\1\323\4\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\11\10\1\324"+
    "\11\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\7\10\1\325\13\10\1\0"+
    "\4\10\47\0\3\10\1\0\1\10\1\326\4\0\5\10"+
    "\1\0\1\10\1\0\23\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\327\16\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\12\10\1\330\10\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\4\10\1\331\16\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\12\10\1\332\10\10\1\0\4\10\47\0\3\10"+
    "\1\0\1\10\1\333\4\0\5\10\1\0\1\10\1\0"+
    "\23\10\1\0\4\10\47\0\3\10\1\0\1\10\1\334"+
    "\4\0\5\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\3\10\1\335\1\336\16\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\7\10\1\337\13\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\6\10\1\340"+
    "\14\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\16\10\1\341\4\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\21\10\1\342\1\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\4\10\1\343\10\10\1\344\5\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\1\345\4\10\1\0\1\10"+
    "\1\0\23\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\23\10\1\0\1\346"+
    "\3\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\347\20\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\14\10\1\350\6\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\12\10\1\351"+
    "\10\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\352\20\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\13\10\1\353\7\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\2\10\1\354\14\10\1\355\3\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\356\10\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\14\10\1\357"+
    "\6\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\3\10\1\360\17\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\21\10\1\361\1\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\362\10\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\10\10\1\363"+
    "\12\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\16\10\1\364\4\10\1\0"+
    "\4\10\26\0\1\65\2\0\1\65\114\0\1\65\10\0"+
    "\1\65\4\0\1\65\103\0\1\66\2\0\1\66\4\0"+
    "\1\66\107\0\1\66\15\0\1\66\124\0\1\62\1\0"+
    "\1\62\10\0\1\62\1\0\2\62\3\0\2\62\4\0"+
    "\1\62\1\0\1\62\1\0\1\62\2\0\1\62\1\0"+
    "\1\62\57\0\1\365\1\0\1\365\10\0\1\365\1\0"+
    "\2\365\3\0\2\365\4\0\1\365\1\0\1\365\1\0"+
    "\1\365\2\0\1\365\1\0\1\365\57\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\10\10\1\366"+
    "\12\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\1\367\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\15\10\1\370\5\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\0\1\371\3\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\3\10\1\372\17\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\14\10\1\373\6\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\16\10\1\374\4\10\1\0\4\10\47\0\1\375\1\0"+
    "\1\375\10\0\1\375\1\0\2\375\3\0\2\375\4\0"+
    "\1\375\1\0\1\375\1\0\1\375\2\0\1\375\1\0"+
    "\1\375\57\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\21\10\1\376\1\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\3\10\1\377\17\10\1\0\4\10\47\0\3\10\1\0"+
    "\1\10\1\u0100\4\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u0101\10\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\6\10\1\u0102\14\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u0103\14\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\10\10\1\u0104\12\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\13\10\1\u0105\7\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\u0106\15\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\u0107\16\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\14\10\1\u0108\6\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\4\10\1\u0109\16\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\20\10\1\u010a\2\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u010b\14\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\12\10\1\u010c\10\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\23\10\1\0\1\10\1\u010d\2\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\u010e\15\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u010f\14\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\1\u0110\4\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\23\10\1\0\2\10\1\u0111\1\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\4\10\1\u0112\16\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\5\10\1\u0113"+
    "\15\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\5\10\1\u0114\15\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\5\10\1\u0115\15\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u0116\10\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\1\u0117\4\10\1\0\1\10\1\0\23\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u0118\10\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\3\10\1\u0119\17\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\5\10"+
    "\1\u011a\15\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\4\10\1\u011b\16\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u011c\10\10\1\0\4\10"+
    "\47\0\1\365\1\0\1\365\4\0\1\62\3\0\1\365"+
    "\1\0\2\365\3\0\2\365\4\0\1\365\1\0\1\365"+
    "\1\0\1\365\2\0\1\365\1\0\1\365\57\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u011d\14\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\14\10\1\u011e\6\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\1\u011f"+
    "\4\10\1\0\1\10\1\0\23\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\7\10\1\u0120\13\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\10\10\1\u0121"+
    "\12\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\14\10\1\u0122\6\10\1\0"+
    "\4\10\47\0\1\375\1\0\1\375\10\0\4\375\1\0"+
    "\1\74\1\0\2\375\4\0\1\375\1\74\1\375\1\0"+
    "\1\375\2\0\1\375\1\0\1\375\57\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\12\10\1\u0123"+
    "\10\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\12\10\1\u0124\10\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\1\u0125\4\10"+
    "\1\0\1\10\1\0\23\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\u0126\16\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\20\10\1\u0127\2\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\17\10\1\u0128\3\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\12\10\1\u0129\10\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\1\u012a\4\10\1\0\1\10\1\0"+
    "\23\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\1\u012b\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\14\10\1\u012c\6\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\2\10"+
    "\1\u012d\20\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\17\10\1\u012e\3\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\7\10\1\u012f\13\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\10\10\1\u0130\12\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\0\3\10\1\u0131\47\0\3\10\1\0\2\10\4\0"+
    "\1\u0132\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\4\10\1\u0133\16\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\15\10"+
    "\1\u0134\5\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\12\10\1\u0135\10\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u0136\10\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\14\10\1\u0137\6\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\20\10"+
    "\1\u0138\2\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\1\u0139\4\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\10\10\1\u013a\12\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u013b\10\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\3\10\1\u013c"+
    "\17\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\1\u013d\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\17\10\1\u013e\3\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\16\10"+
    "\1\u013f\4\10\1\0\4\10\47\0\3\10\1\0\1\10"+
    "\1\u0140\4\0\5\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\13\10\1\u0141\7\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\1\u0142\4\10\1\0\1\10"+
    "\1\0\23\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\12\10\1\u0143\10\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\13\10\1\u0144\7\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\12\10\1\u0145\10\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\u0146\10\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\6\10\1\u0147\14\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\16\10\1\u0148\4\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\10\10\1\u0149\12\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\u014a\10\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\13\10\1\u014b\7\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\1\u014c"+
    "\4\10\1\0\1\10\1\0\23\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u014d\10\10\1\0\4\10\47\0\3\10\1\0"+
    "\2\10\4\0\5\10\1\0\1\10\1\0\2\10\1\u014e"+
    "\20\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\12\10\1\u014f\10\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\12\10\1\u0150\10\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\22\10\1\u0151\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\12\10\1\u0152\10\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\5\10\1\u0153\15\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\u0154\15\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\u0155\16\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\12\10\1\u0156\10\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\u0157\21\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\17\10\1\u0158\3\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\u0159\10\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\17\10\1\u015a\3\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\6\10\1\u015b\14\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\u015c\20\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\14\10"+
    "\1\u015d\6\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\16\10\1\u015e\4\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\3\10\1\u015f\17\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\10\10\1\u0160\12\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\5\10\1\0\1\10\1\0\2\10"+
    "\1\u0161\20\10\1\0\4\10\47\0\3\10\1\0\2\10"+
    "\4\0\5\10\1\0\1\10\1\0\12\10\1\u0162\10\10"+
    "\1\0\4\10\47\0\3\10\1\0\2\10\4\0\5\10"+
    "\1\0\1\10\1\0\7\10\1\u0163\13\10\1\0\4\10"+
    "\47\0\3\10\1\0\2\10\4\0\5\10\1\0\1\10"+
    "\1\0\16\10\1\u0164\4\10\1\0\4\10\47\0\3\10"+
    "\1\0\2\10\4\0\1\u0165\4\10\1\0\1\10\1\0"+
    "\23\10\1\0\4\10\47\0\3\10\1\0\2\10\4\0"+
    "\5\10\1\0\1\10\1\0\10\10\1\u0166\12\10\1\0"+
    "\4\10\47\0\3\10\1\0\2\10\4\0\5\10\1\0"+
    "\1\10\1\0\6\10\1\u0167\14\10\1\0\4\10\47\0"+
    "\3\10\1\0\2\10\4\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u0168\10\10\1\0\4\10\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21789];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\35\1\11\11\6\0\1\1"+
    "\2\11\2\0\2\1\2\0\1\11\2\1\3\0\1\1"+
    "\4\11\40\1\2\11\1\1\1\11\1\1\1\11\1\1"+
    "\6\11\1\1\2\11\1\1\2\11\6\0\5\1\1\0"+
    "\14\1\2\11\46\1\4\11\6\0\10\1\1\0\43\1"+
    "\1\0\163\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 118: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 119: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 120: break;
          case 4: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 121: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 122: break;
          case 6: 
            { return ID;
            } 
            // fall through
          case 123: break;
          case 7: 
            { return LBRACE;
            } 
            // fall through
          case 124: break;
          case 8: 
            { return RBRACE;
            } 
            // fall through
          case 125: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 126: break;
          case 10: 
            { return MINUS;
            } 
            // fall through
          case 127: break;
          case 11: 
            { return EQUAL;
            } 
            // fall through
          case 128: break;
          case 12: 
            { return LARROW;
            } 
            // fall through
          case 129: break;
          case 13: 
            { return RARROW;
            } 
            // fall through
          case 130: break;
          case 14: 
            { return AMPERSAND;
            } 
            // fall through
          case 131: break;
          case 15: 
            { return CARET;
            } 
            // fall through
          case 132: break;
          case 16: 
            { return PIPE;
            } 
            // fall through
          case 133: break;
          case 17: 
            { return PLUS;
            } 
            // fall through
          case 134: break;
          case 18: 
            { return PERCENT;
            } 
            // fall through
          case 135: break;
          case 19: 
            { return ASTERISK;
            } 
            // fall through
          case 136: break;
          case 20: 
            { return TILDE;
            } 
            // fall through
          case 137: break;
          case 21: 
            { return LBRACKET;
            } 
            // fall through
          case 138: break;
          case 22: 
            { return RBRACKET;
            } 
            // fall through
          case 139: break;
          case 23: 
            { return QUESTIONMARK;
            } 
            // fall through
          case 140: break;
          case 24: 
            { return SEMICOLON;
            } 
            // fall through
          case 141: break;
          case 25: 
            { return LPAREN;
            } 
            // fall through
          case 142: break;
          case 26: 
            { return RPAREN;
            } 
            // fall through
          case 143: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 144: break;
          case 28: 
            { return COLON;
            } 
            // fall through
          case 145: break;
          case 29: 
            { 
            } 
            // fall through
          case 146: break;
          case 30: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 147: break;
          case 31: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 148: break;
          case 32: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 149: break;
          case 33: 
            { return DOT2;
            } 
            // fall through
          case 150: break;
          case 34: 
            { return DOTASTERISK;
            } 
            // fall through
          case 151: break;
          case 35: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 152: break;
          case 36: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 153: break;
          case 37: 
            { return MINUSRARROW;
            } 
            // fall through
          case 154: break;
          case 38: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 155: break;
          case 39: 
            { return OR;
            } 
            // fall through
          case 156: break;
          case 40: 
            { return IF;
            } 
            // fall through
          case 157: break;
          case 41: 
            { return FN;
            } 
            // fall through
          case 158: break;
          case 42: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 159: break;
          case 43: 
            { return EQUALRARROW;
            } 
            // fall through
          case 160: break;
          case 44: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 161: break;
          case 45: 
            { return LARROW2;
            } 
            // fall through
          case 162: break;
          case 46: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 163: break;
          case 47: 
            { return RARROW2;
            } 
            // fall through
          case 164: break;
          case 48: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 165: break;
          case 49: 
            { return CARETEQUAL;
            } 
            // fall through
          case 166: break;
          case 50: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 167: break;
          case 51: 
            { return PIPE2;
            } 
            // fall through
          case 168: break;
          case 52: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 169: break;
          case 53: 
            { return PLUS2;
            } 
            // fall through
          case 170: break;
          case 54: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 171: break;
          case 55: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 172: break;
          case 56: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 173: break;
          case 57: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 174: break;
          case 58: 
            { return ASTERISK2;
            } 
            // fall through
          case 175: break;
          case 59: 
            { return CHAR_LITERAL;
            } 
            // fall through
          case 176: break;
          case 60: 
            { return COMMENT;
            } 
            // fall through
          case 177: break;
          case 61: 
            { return CONTAINER_DOC;
            } 
            // fall through
          case 178: break;
          case 62: 
            { return FLOAT;
            } 
            // fall through
          case 179: break;
          case 63: 
            { return DOT3;
            } 
            // fall through
          case 180: break;
          case 64: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 181: break;
          case 65: 
            { return TRY;
            } 
            // fall through
          case 182: break;
          case 66: 
            { return PUB;
            } 
            // fall through
          case 183: break;
          case 67: 
            { return AND;
            } 
            // fall through
          case 184: break;
          case 68: 
            { return ASM;
            } 
            // fall through
          case 185: break;
          case 69: 
            { return FOR;
            } 
            // fall through
          case 186: break;
          case 70: 
            { return VAR;
            } 
            // fall through
          case 187: break;
          case 71: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 188: break;
          case 72: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 189: break;
          case 73: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 190: break;
          case 74: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 191: break;
          case 75: 
            { return NULL;
            } 
            // fall through
          case 192: break;
          case 76: 
            { return TRUE;
            } 
            // fall through
          case 193: break;
          case 77: 
            { return TEST;
            } 
            // fall through
          case 194: break;
          case 78: 
            { return ENUM;
            } 
            // fall through
          case 195: break;
          case 79: 
            { return ELSE;
            } 
            // fall through
          case 196: break;
          case 80: 
            { return UNION;
            } 
            // fall through
          case 197: break;
          case 81: 
            { return BREAK;
            } 
            // fall through
          case 198: break;
          case 82: 
            { return CONST;
            } 
            // fall through
          case 199: break;
          case 83: 
            { return CATCH;
            } 
            // fall through
          case 200: break;
          case 84: 
            { return ASYNC;
            } 
            // fall through
          case 201: break;
          case 85: 
            { return ALIGN;
            } 
            // fall through
          case 202: break;
          case 86: 
            { return AWAIT;
            } 
            // fall through
          case 203: break;
          case 87: 
            { return ERROR;
            } 
            // fall through
          case 204: break;
          case 88: 
            { return FALSE;
            } 
            // fall through
          case 205: break;
          case 89: 
            { return DEFER;
            } 
            // fall through
          case 206: break;
          case 90: 
            { return WHILE;
            } 
            // fall through
          case 207: break;
          case 91: 
            { return ORELSE;
            } 
            // fall through
          case 208: break;
          case 92: 
            { return OPAQUE;
            } 
            // fall through
          case 209: break;
          case 93: 
            { return STRUCT;
            } 
            // fall through
          case 210: break;
          case 94: 
            { return SWITCH;
            } 
            // fall through
          case 211: break;
          case 95: 
            { return RESUME;
            } 
            // fall through
          case 212: break;
          case 96: 
            { return RETURN;
            } 
            // fall through
          case 213: break;
          case 97: 
            { return PACKED;
            } 
            // fall through
          case 214: break;
          case 98: 
            { return EXTERN;
            } 
            // fall through
          case 215: break;
          case 99: 
            { return EXPORT;
            } 
            // fall through
          case 216: break;
          case 100: 
            { return INLINE;
            } 
            // fall through
          case 217: break;
          case 101: 
            { return NOALIAS;
            } 
            // fall through
          case 218: break;
          case 102: 
            { return SUSPEND;
            } 
            // fall through
          case 219: break;
          case 103: 
            { return ANY_TYPE;
            } 
            // fall through
          case 220: break;
          case 104: 
            { return NOINLINE;
            } 
            // fall through
          case 221: break;
          case 105: 
            { return CONTINUE;
            } 
            // fall through
          case 222: break;
          case 106: 
            { return COMPTIME;
            } 
            // fall through
          case 223: break;
          case 107: 
            { return CALLCONV;
            } 
            // fall through
          case 224: break;
          case 108: 
            { return ANYFRAME;
            } 
            // fall through
          case 225: break;
          case 109: 
            { return ERRDEFER;
            } 
            // fall through
          case 226: break;
          case 110: 
            { return VOLATILE;
            } 
            // fall through
          case 227: break;
          case 111: 
            { return UNDEFINED;
            } 
            // fall through
          case 228: break;
          case 112: 
            { return NOSUSPEND;
            } 
            // fall through
          case 229: break;
          case 113: 
            { return ALLOWZERO;
            } 
            // fall through
          case 230: break;
          case 114: 
            { return UNREACHABLE;
            } 
            // fall through
          case 231: break;
          case 115: 
            { return THREAD_LOCAL;
            } 
            // fall through
          case 232: break;
          case 116: 
            { return LINKSECTION;
            } 
            // fall through
          case 233: break;
          case 117: 
            { return USING_NAME_SPACE;
            } 
            // fall through
          case 234: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
