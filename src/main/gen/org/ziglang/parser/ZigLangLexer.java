/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZigLangLexer.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\40\1\2\3\3\22\20\1\23\1\25\1\32\2\20\1\107\1\103\1\6\1\116\1\117"+
    "\1\110\1\106\1\120\1\50\1\46\1\24\1\45\1\42\6\44\2\26\1\121\1\115\1\101\1"+
    "\74\1\102\1\114\1\31\4\30\1\51\1\30\11\27\1\47\12\27\1\112\1\33\1\113\1\104"+
    "\1\43\1\20\1\61\1\52\1\57\1\70\1\63\1\66\1\75\1\71\1\65\1\27\1\72\1\67\1\64"+
    "\1\41\1\53\1\60\1\62\1\56\1\54\1\55\1\35\1\73\1\77\1\34\1\76\1\100\1\36\1"+
    "\105\1\37\1\111\1\20\5\10\1\5\12\10\20\15\1\22\37\4\2\0\36\17\1\16\14\13\1"+
    "\14\2\13\1\12\3\11\1\7\213\0\1\21\177\0\13\21\35\0\2\1\5\0\1\21\57\0\1\21"+
    "\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\2\1\1\6\1\7\1\10\1\6\1\5\1\11\1\12"+
    "\16\6\1\13\1\6\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\6\0\1\35\1\36\1\37"+
    "\4\0\1\40\1\0\4\6\3\0\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\6\1\47\25\6\1\50\1\51"+
    "\6\6\1\52\1\53\1\6\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\6\0\1\35\1\74\1\75"+
    "\2\76\1\0\1\6\1\0\1\40\10\6\3\5\1\77"+
    "\1\100\7\6\1\101\10\6\1\102\1\6\1\103\1\6"+
    "\1\104\12\6\1\105\4\6\1\106\1\6\1\107\1\110"+
    "\1\111\1\112\6\0\5\6\1\113\3\6\1\0\6\6"+
    "\1\114\1\115\21\6\1\116\2\6\1\117\6\6\1\0"+
    "\1\6\1\120\5\6\1\76\1\121\10\6\1\122\2\6"+
    "\1\123\4\6\1\124\1\125\1\6\1\126\2\6\1\127"+
    "\2\6\1\130\1\6\1\131\1\6\1\132\6\6\1\133"+
    "\1\134\1\6\1\135\1\136\1\6\1\137\1\140\3\6"+
    "\1\141\3\6\1\142\1\143\1\6\1\144\6\6\1\145"+
    "\1\6\1\146\4\6\1\147\11\6\1\150\1\6\1\151"+
    "\1\152\1\153\1\154\1\6\1\155\1\6\1\156\1\6"+
    "\1\157\1\6\1\160\1\6\1\161\5\6\1\162\1\6"+
    "\1\163\1\164\2\6\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\122\0\122\0\u0386\0\u03d8\0\u042a"+
    "\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba"+
    "\0\u070c\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda"+
    "\0\u0c2c\0\122\0\122\0\122\0\122\0\122\0\122\0\122"+
    "\0\122\0\122\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0e18"+
    "\0\u0e6a\0\122\0\122\0\u0ebc\0\u0f0e\0\u0f60\0\u02e2\0\122"+
    "\0\u0fb2\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0"+
    "\0\u1242\0\122\0\122\0\122\0\122\0\u1294\0\u12e6\0\u1338"+
    "\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2\0\u1524\0\u1576\0\u15c8"+
    "\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u1806\0\u1858"+
    "\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u023e\0\u023e\0\u1a44"+
    "\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\122\0\122\0\u1c30"+
    "\0\122\0\u1c82\0\122\0\u1cd4\0\122\0\122\0\122\0\122"+
    "\0\122\0\122\0\u1d26\0\122\0\122\0\u1d78\0\122\0\122"+
    "\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6\0\u2008"+
    "\0\u205a\0\u20ac\0\u20fe\0\u2150\0\122\0\u21a2\0\u02e2\0\u21f4"+
    "\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484"+
    "\0\u24d6\0\u2528\0\122\0\122\0\u257a\0\u25cc\0\u261e\0\u2670"+
    "\0\u26c2\0\u2714\0\u2766\0\u023e\0\u27b8\0\u280a\0\u285c\0\u28ae"+
    "\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u023e\0\u2a48\0\u023e\0\u2a9a"+
    "\0\u023e\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u2cd8"+
    "\0\u2d2a\0\u2d7c\0\u2dce\0\u023e\0\u2e20\0\u2e72\0\u2ec4\0\u2f16"+
    "\0\u023e\0\u2f68\0\122\0\122\0\122\0\122\0\u2fba\0\u300c"+
    "\0\u305e\0\u30b0\0\u3102\0\u3154\0\u0f60\0\u31a6\0\u31f8\0\u324a"+
    "\0\u329c\0\u023e\0\u32ee\0\u3340\0\u3392\0\u33e4\0\u3436\0\u3488"+
    "\0\u34da\0\u352c\0\u357e\0\u35d0\0\u023e\0\u023e\0\u3622\0\u3674"+
    "\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2\0\u3904"+
    "\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u023e"+
    "\0\u3b94\0\u3be6\0\u023e\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80"+
    "\0\u3dd2\0\u3e24\0\u3e76\0\u023e\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe"+
    "\0\u4010\0\u4062\0\u023e\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc"+
    "\0\u424e\0\u42a0\0\u42f2\0\u023e\0\u4344\0\u4396\0\u023e\0\u43e8"+
    "\0\u443a\0\u448c\0\u44de\0\u023e\0\u023e\0\u4530\0\u023e\0\u4582"+
    "\0\u45d4\0\u023e\0\u4626\0\u4678\0\u023e\0\u46ca\0\u023e\0\u471c"+
    "\0\u023e\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6\0\u4908\0\u023e"+
    "\0\u023e\0\u495a\0\u023e\0\u023e\0\u49ac\0\u023e\0\u023e\0\u49fe"+
    "\0\u4a50\0\u4aa2\0\u023e\0\u4af4\0\u4b46\0\u4b98\0\u023e\0\u023e"+
    "\0\u4bea\0\u023e\0\u4c3c\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6"+
    "\0\u023e\0\u4e28\0\u023e\0\u4e7a\0\u4ecc\0\u4f1e\0\u4f70\0\u023e"+
    "\0\u4fc2\0\u5014\0\u5066\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u5200"+
    "\0\u5252\0\u023e\0\u52a4\0\u023e\0\u023e\0\u023e\0\u023e\0\u52f6"+
    "\0\u023e\0\u5348\0\u023e\0\u539a\0\u023e\0\u53ec\0\u023e\0\u543e"+
    "\0\u023e\0\u5490\0\u54e2\0\u5534\0\u5586\0\u55d8\0\u023e\0\u562a"+
    "\0\u023e\0\u023e\0\u567c\0\u56ce\0\u023e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\3\1\4\12\2\3\3\1\5"+
    "\1\6\1\7\2\10\1\11\1\12\1\2\1\10\1\13"+
    "\1\14\1\15\1\3\1\16\1\7\1\10\1\7\1\17"+
    "\1\20\1\10\1\21\1\10\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\10\1\32\1\10\1\33"+
    "\1\34\1\35\1\36\2\10\1\37\1\40\2\10\1\41"+
    "\1\10\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\123\0\3\3\1\0\1\3\13\0\3\3"+
    "\14\0\1\3\64\0\1\63\2\0\1\64\2\0\1\65"+
    "\1\0\1\66\3\0\1\67\1\63\2\0\10\63\1\70"+
    "\66\63\24\0\1\71\47\0\1\72\121\0\1\73\53\0"+
    "\1\7\13\0\4\7\1\74\2\0\1\75\11\0\1\75"+
    "\64\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\23\10\1\0\4\10\53\0\1\76\67\0\2\77"+
    "\1\0\27\77\1\100\1\101\66\77\26\0\3\10\3\0"+
    "\2\10\3\0\1\102\4\10\1\0\1\10\1\0\3\10"+
    "\1\103\17\10\1\0\4\10\47\0\3\10\3\0\1\10"+
    "\1\104\3\0\5\10\1\0\1\10\1\0\2\10\1\105"+
    "\20\10\1\0\4\10\47\0\1\7\5\0\1\106\5\0"+
    "\4\7\1\74\2\0\1\75\1\107\1\110\7\0\1\75"+
    "\104\0\1\111\41\0\1\112\3\0\1\113\101\0\1\114"+
    "\5\0\1\115\4\0\1\116\40\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\5\10\1\117\15\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\5\10\1\120\1\10\1\121\13\10"+
    "\1\0\4\10\47\0\3\10\3\0\1\10\1\122\3\0"+
    "\5\10\1\0\1\10\1\0\4\10\1\123\16\10\1\0"+
    "\2\10\1\124\1\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\5\10\1\125\4\10\1\126"+
    "\5\10\1\127\2\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\12\10\1\130"+
    "\10\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\131\5\10\1\132"+
    "\12\10\1\0\4\10\47\0\3\10\3\0\1\10\1\133"+
    "\3\0\5\10\1\0\1\10\1\0\10\10\1\134\12\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\1\135"+
    "\4\10\1\0\1\10\1\0\3\10\1\136\12\10\1\137"+
    "\4\10\1\0\2\10\1\140\1\10\47\0\3\10\3\0"+
    "\1\141\1\10\3\0\1\142\4\10\1\0\1\10\1\0"+
    "\5\10\1\143\10\10\1\144\4\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\1\145\4\10\1\0\1\10"+
    "\1\0\15\10\1\146\5\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\1\147\4\10\1\0\1\10\1\0"+
    "\2\10\1\150\5\10\1\151\12\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\14\10\1\152\6\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\12\10\1\153"+
    "\10\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\154\5\10\1\155"+
    "\12\10\1\0\4\10\115\0\1\156\5\0\1\157\45\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\20\10\1\160\2\10\1\0\4\10\115\0\1\161\4\0"+
    "\1\162\114\0\1\163\5\0\1\164\113\0\1\165\121\0"+
    "\1\166\121\0\1\167\10\0\1\170\110\0\1\171\11\0"+
    "\1\172\1\173\106\0\1\174\121\0\1\175\12\0\1\176"+
    "\1\177\17\0\1\200\122\0\1\201\2\0\1\202\1\0"+
    "\1\203\1\0\1\204\107\0\2\66\2\0\1\66\4\0"+
    "\1\66\4\0\1\66\103\0\2\67\2\0\1\67\4\0"+
    "\1\67\4\0\1\67\103\0\2\63\2\0\1\63\4\0"+
    "\1\63\4\0\1\63\105\0\1\63\23\0\1\63\1\0"+
    "\1\205\1\206\2\0\2\63\14\0\1\63\43\0\2\207"+
    "\1\0\21\207\1\210\1\211\74\207\26\0\1\212\13\0"+
    "\1\212\1\0\2\212\102\0\1\213\13\0\1\213\1\0"+
    "\2\213\2\0\1\214\35\0\1\214\13\0\2\76\1\0"+
    "\27\76\1\215\1\216\66\76\2\77\1\0\27\77\1\217"+
    "\1\101\66\77\26\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\5\10\1\220\6\10\1\221\2\10"+
    "\1\222\3\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\14\10\1\223\6\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\16\10\1\224\4\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\3\10\1\225\4\10\1\226\3\10\1\227\6\10"+
    "\1\0\4\10\47\0\1\230\1\0\1\230\11\0\1\230"+
    "\1\0\2\230\3\0\2\230\4\0\1\230\1\0\1\230"+
    "\1\0\1\230\2\0\1\230\1\0\1\230\73\0\1\231"+
    "\2\0\1\231\116\0\1\232\1\0\2\232\122\0\1\233"+
    "\147\0\1\234\53\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\235\10\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\12\10\1\236\10\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\10\10"+
    "\1\237\12\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\3\10\1\240\17\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\5\10\1\241\15\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\14\10\1\242\6\10\1\0\4\10\47\0\3\10"+
    "\3\0\1\10\1\243\3\0\5\10\1\0\1\10\1\0"+
    "\23\10\1\0\1\10\1\244\2\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\3\10\1\245"+
    "\17\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\5\10\1\246\15\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\3\10\1\247\1\250\16\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\1\251\4\10\1\0"+
    "\1\10\1\0\13\10\1\252\7\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\4\10\1\253\11\10\1\254\4\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\255\21\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\6\10\1\256"+
    "\14\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\17\10\1\257\3\10\1\0"+
    "\1\10\1\260\2\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\13\10\1\261\7\10\1\0"+
    "\1\10\1\262\2\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\14\10\1\263\1\10\1\264"+
    "\4\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\10\10\1\265\12\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\4\10\1\266\2\10\1\267\13\10\1\0"+
    "\4\10\47\0\3\10\3\0\1\10\1\270\3\0\5\10"+
    "\1\0\1\10\1\0\23\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\5\10"+
    "\1\271\15\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\3\10\1\272\17\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\16\10\1\273\4\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\274\15\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\16\10"+
    "\1\275\4\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\1\276\4\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\15\10\1\277\5\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\16\10\1\300\4\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\5\10\1\301"+
    "\15\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\14\10\1\302\6\10\1\0"+
    "\4\10\115\0\1\303\121\0\1\304\121\0\1\305\121\0"+
    "\1\306\33\0\1\307\121\0\1\310\121\0\1\311\121\0"+
    "\1\312\141\0\1\313\1\0\1\313\11\0\1\313\1\0"+
    "\2\313\3\0\2\313\4\0\1\313\1\0\1\313\1\0"+
    "\1\313\2\0\1\313\1\0\1\313\67\0\1\314\63\0"+
    "\2\207\1\0\117\207\1\210\1\207\1\0\1\207\1\210"+
    "\1\207\114\210\1\211\1\207\1\0\1\207\1\211\1\207"+
    "\114\211\26\0\1\212\13\0\4\212\3\0\1\75\11\0"+
    "\1\75\64\0\1\213\13\0\4\213\102\0\1\213\13\0"+
    "\1\213\1\0\2\213\54\0\2\76\1\0\27\76\1\315"+
    "\1\216\66\76\26\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\316\10\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\317\20\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\320\10\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\1\321\4\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\16\10\1\322\4\10\1\0\4\10\47\0"+
    "\3\10\3\0\1\10\1\323\3\0\5\10\1\0\1\10"+
    "\1\0\23\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\16\10\1\324\4\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\1\325"+
    "\4\10\1\0\1\10\1\0\23\10\1\0\4\10\47\0"+
    "\1\230\1\0\1\230\11\0\4\230\1\326\1\75\1\0"+
    "\2\230\4\0\1\230\1\75\1\230\1\0\1\230\2\0"+
    "\1\230\1\0\1\230\73\0\2\231\1\0\1\231\116\0"+
    "\4\232\102\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\10\10\1\327\12\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\16\10\1\330\4\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\11\10\1\331"+
    "\11\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\7\10\1\332\13\10\1\0"+
    "\4\10\47\0\3\10\3\0\1\10\1\333\3\0\5\10"+
    "\1\0\1\10\1\0\23\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\334\16\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\12\10\1\335\10\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\4\10\1\336\16\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\12\10\1\337\10\10\1\0\4\10\47\0\3\10"+
    "\3\0\1\10\1\340\3\0\5\10\1\0\1\10\1\0"+
    "\23\10\1\0\4\10\47\0\3\10\3\0\1\10\1\341"+
    "\3\0\5\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\3\10\1\342\1\343\16\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\7\10\1\344\13\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\6\10\1\345"+
    "\14\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\16\10\1\346\4\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\21\10\1\347\1\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\4\10\1\350\10\10\1\351\5\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\1\352\4\10\1\0\1\10"+
    "\1\0\23\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\23\10\1\0\1\353"+
    "\3\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\354\20\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\14\10\1\355\6\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\12\10\1\356"+
    "\10\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\357\20\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\13\10\1\360\7\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\2\10\1\361\14\10\1\362\3\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\363\10\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\14\10\1\364"+
    "\6\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\3\10\1\365\17\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\21\10\1\366\1\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\367\10\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\10\10\1\370"+
    "\12\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\16\10\1\371\4\10\1\0"+
    "\4\10\26\0\1\66\2\0\1\66\115\0\1\66\10\0"+
    "\1\66\4\0\1\66\104\0\1\67\2\0\1\67\4\0"+
    "\1\67\110\0\1\67\15\0\1\67\125\0\1\63\1\0"+
    "\1\63\11\0\1\63\1\0\2\63\3\0\2\63\4\0"+
    "\1\63\1\0\1\63\1\0\1\63\2\0\1\63\1\0"+
    "\1\63\57\0\1\372\1\0\1\372\11\0\1\372\1\0"+
    "\2\372\3\0\2\372\4\0\1\372\1\0\1\372\1\0"+
    "\1\372\2\0\1\372\1\0\1\372\57\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\10\10\1\373"+
    "\12\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\1\374\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\15\10\1\375\5\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\0\1\376\3\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\3\10\1\377\17\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\14\10\1\u0100\6\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\16\10\1\u0101\4\10\1\0\4\10\47\0\1\u0102\1\0"+
    "\1\u0102\11\0\1\u0102\1\0\2\u0102\3\0\2\u0102\4\0"+
    "\1\u0102\1\0\1\u0102\1\0\1\u0102\2\0\1\u0102\1\0"+
    "\1\u0102\57\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\21\10\1\u0103\1\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\3\10\1\u0104\17\10\1\0\4\10\47\0\3\10\3\0"+
    "\1\10\1\u0105\3\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u0106\10\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\6\10\1\u0107\14\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u0108\14\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\10\10\1\u0109\12\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\13\10\1\u010a\7\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\u010b\15\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\u010c\16\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\14\10\1\u010d\6\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\4\10\1\u010e\16\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\20\10\1\u010f\2\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u0110\14\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\12\10\1\u0111\10\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\23\10\1\0\1\10\1\u0112\2\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\u0113\15\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u0114\14\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\1\u0115\4\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\23\10\1\0\2\10\1\u0116\1\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\4\10\1\u0117\16\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\5\10\1\u0118"+
    "\15\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\5\10\1\u0119\15\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\5\10\1\u011a\15\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u011b\10\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\1\u011c\4\10\1\0\1\10\1\0\23\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u011d\10\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\3\10\1\u011e\17\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\5\10"+
    "\1\u011f\15\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\4\10\1\u0120\16\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u0121\10\10\1\0\4\10"+
    "\47\0\1\372\1\0\1\372\6\0\1\63\2\0\1\372"+
    "\1\0\2\372\3\0\2\372\4\0\1\372\1\0\1\372"+
    "\1\0\1\372\2\0\1\372\1\0\1\372\57\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\6\10"+
    "\1\u0122\14\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\14\10\1\u0123\6\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\1\u0124"+
    "\4\10\1\0\1\10\1\0\23\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\7\10\1\u0125\13\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\10\10\1\u0126"+
    "\12\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\14\10\1\u0127\6\10\1\0"+
    "\4\10\47\0\1\u0102\1\0\1\u0102\11\0\4\u0102\1\0"+
    "\1\75\1\0\2\u0102\4\0\1\u0102\1\75\1\u0102\1\0"+
    "\1\u0102\2\0\1\u0102\1\0\1\u0102\57\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\12\10\1\u0128"+
    "\10\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\12\10\1\u0129\10\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\1\u012a\4\10"+
    "\1\0\1\10\1\0\23\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\u012b\16\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\20\10\1\u012c\2\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\17\10\1\u012d\3\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\12\10\1\u012e\10\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\1\u012f\4\10\1\0\1\10\1\0"+
    "\23\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\1\u0130\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\14\10\1\u0131\6\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\2\10"+
    "\1\u0132\20\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\17\10\1\u0133\3\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\7\10\1\u0134\13\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\10\10\1\u0135\12\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\23\10"+
    "\1\0\3\10\1\u0136\47\0\3\10\3\0\2\10\3\0"+
    "\1\u0137\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\4\10\1\u0138\16\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\15\10"+
    "\1\u0139\5\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\12\10\1\u013a\10\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\12\10\1\u013b\10\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\14\10\1\u013c\6\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\20\10"+
    "\1\u013d\2\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\1\u013e\4\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\10\10\1\u013f\12\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u0140\10\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\3\10\1\u0141"+
    "\17\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\1\u0142\4\10\1\0\1\10\1\0\23\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\17\10\1\u0143\3\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\16\10"+
    "\1\u0144\4\10\1\0\4\10\47\0\3\10\3\0\1\10"+
    "\1\u0145\3\0\5\10\1\0\1\10\1\0\23\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\13\10\1\u0146\7\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\1\u0147\4\10\1\0\1\10"+
    "\1\0\23\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\12\10\1\u0148\10\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\13\10\1\u0149\7\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\12\10\1\u014a\10\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\u014b\10\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\6\10\1\u014c\14\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\16\10\1\u014d\4\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\10\10\1\u014e\12\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\u014f\10\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\13\10\1\u0150\7\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\1\u0151"+
    "\4\10\1\0\1\10\1\0\23\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u0152\10\10\1\0\4\10\47\0\3\10\3\0"+
    "\2\10\3\0\5\10\1\0\1\10\1\0\2\10\1\u0153"+
    "\20\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\12\10\1\u0154\10\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\12\10\1\u0155\10\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\22\10\1\u0156\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\12\10\1\u0157\10\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\5\10\1\u0158\15\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\5\10\1\u0159\15\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\4\10"+
    "\1\u015a\16\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\12\10\1\u015b\10\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\u015c\21\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\17\10\1\u015d\3\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\12\10"+
    "\1\u015e\10\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\17\10\1\u015f\3\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\6\10\1\u0160\14\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\u0161\20\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\14\10"+
    "\1\u0162\6\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\16\10\1\u0163\4\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\3\10\1\u0164\17\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\10\10\1\u0165\12\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\5\10\1\0\1\10\1\0\2\10"+
    "\1\u0166\20\10\1\0\4\10\47\0\3\10\3\0\2\10"+
    "\3\0\5\10\1\0\1\10\1\0\12\10\1\u0167\10\10"+
    "\1\0\4\10\47\0\3\10\3\0\2\10\3\0\5\10"+
    "\1\0\1\10\1\0\7\10\1\u0168\13\10\1\0\4\10"+
    "\47\0\3\10\3\0\2\10\3\0\5\10\1\0\1\10"+
    "\1\0\16\10\1\u0169\4\10\1\0\4\10\47\0\3\10"+
    "\3\0\2\10\3\0\1\u016a\4\10\1\0\1\10\1\0"+
    "\23\10\1\0\4\10\47\0\3\10\3\0\2\10\3\0"+
    "\5\10\1\0\1\10\1\0\10\10\1\u016b\12\10\1\0"+
    "\4\10\47\0\3\10\3\0\2\10\3\0\5\10\1\0"+
    "\1\10\1\0\6\10\1\u016c\14\10\1\0\4\10\47\0"+
    "\3\10\3\0\2\10\3\0\5\10\1\0\1\10\1\0"+
    "\12\10\1\u016d\10\10\1\0\4\10\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\2\11\34\1\11\11\6\0\1\1"+
    "\2\11\4\0\1\11\1\0\4\1\3\0\1\1\4\11"+
    "\40\1\2\11\1\1\1\11\1\1\1\11\1\1\6\11"+
    "\1\1\2\11\1\1\2\11\6\0\5\1\1\0\1\11"+
    "\1\0\14\1\2\11\46\1\4\11\6\0\11\1\1\0"+
    "\43\1\1\0\163\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 118: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 119: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 120: break;
          case 4: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 121: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 122: break;
          case 6: 
            { return ID;
            } 
            // fall through
          case 123: break;
          case 7: 
            { return LBRACE;
            } 
            // fall through
          case 124: break;
          case 8: 
            { return RBRACE;
            } 
            // fall through
          case 125: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 126: break;
          case 10: 
            { return MINUS;
            } 
            // fall through
          case 127: break;
          case 11: 
            { return EQUAL;
            } 
            // fall through
          case 128: break;
          case 12: 
            { return LARROW;
            } 
            // fall through
          case 129: break;
          case 13: 
            { return RARROW;
            } 
            // fall through
          case 130: break;
          case 14: 
            { return AMPERSAND;
            } 
            // fall through
          case 131: break;
          case 15: 
            { return CARET;
            } 
            // fall through
          case 132: break;
          case 16: 
            { return PIPE;
            } 
            // fall through
          case 133: break;
          case 17: 
            { return PLUS;
            } 
            // fall through
          case 134: break;
          case 18: 
            { return PERCENT;
            } 
            // fall through
          case 135: break;
          case 19: 
            { return ASTERISK;
            } 
            // fall through
          case 136: break;
          case 20: 
            { return TILDE;
            } 
            // fall through
          case 137: break;
          case 21: 
            { return LBRACKET;
            } 
            // fall through
          case 138: break;
          case 22: 
            { return RBRACKET;
            } 
            // fall through
          case 139: break;
          case 23: 
            { return QUESTIONMARK;
            } 
            // fall through
          case 140: break;
          case 24: 
            { return SEMICOLON;
            } 
            // fall through
          case 141: break;
          case 25: 
            { return LPAREN;
            } 
            // fall through
          case 142: break;
          case 26: 
            { return RPAREN;
            } 
            // fall through
          case 143: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 144: break;
          case 28: 
            { return COLON;
            } 
            // fall through
          case 145: break;
          case 29: 
            { 
            } 
            // fall through
          case 146: break;
          case 30: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 147: break;
          case 31: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 148: break;
          case 32: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 149: break;
          case 33: 
            { return DOT2;
            } 
            // fall through
          case 150: break;
          case 34: 
            { return DOTASTERISK;
            } 
            // fall through
          case 151: break;
          case 35: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 152: break;
          case 36: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 153: break;
          case 37: 
            { return MINUSRARROW;
            } 
            // fall through
          case 154: break;
          case 38: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 155: break;
          case 39: 
            { return OR;
            } 
            // fall through
          case 156: break;
          case 40: 
            { return IF;
            } 
            // fall through
          case 157: break;
          case 41: 
            { return FN;
            } 
            // fall through
          case 158: break;
          case 42: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 159: break;
          case 43: 
            { return EQUALRARROW;
            } 
            // fall through
          case 160: break;
          case 44: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 161: break;
          case 45: 
            { return LARROW2;
            } 
            // fall through
          case 162: break;
          case 46: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 163: break;
          case 47: 
            { return RARROW2;
            } 
            // fall through
          case 164: break;
          case 48: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 165: break;
          case 49: 
            { return CARETEQUAL;
            } 
            // fall through
          case 166: break;
          case 50: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 167: break;
          case 51: 
            { return PIPE2;
            } 
            // fall through
          case 168: break;
          case 52: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 169: break;
          case 53: 
            { return PLUS2;
            } 
            // fall through
          case 170: break;
          case 54: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 171: break;
          case 55: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 172: break;
          case 56: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 173: break;
          case 57: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 174: break;
          case 58: 
            { return ASTERISK2;
            } 
            // fall through
          case 175: break;
          case 59: 
            { return CHAR_LITERAL;
            } 
            // fall through
          case 176: break;
          case 60: 
            { return COMMENT;
            } 
            // fall through
          case 177: break;
          case 61: 
            { return CONTAINER_DOC;
            } 
            // fall through
          case 178: break;
          case 62: 
            { return FLOAT;
            } 
            // fall through
          case 179: break;
          case 63: 
            { return DOT3;
            } 
            // fall through
          case 180: break;
          case 64: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 181: break;
          case 65: 
            { return TRY;
            } 
            // fall through
          case 182: break;
          case 66: 
            { return PUB;
            } 
            // fall through
          case 183: break;
          case 67: 
            { return AND;
            } 
            // fall through
          case 184: break;
          case 68: 
            { return ASM;
            } 
            // fall through
          case 185: break;
          case 69: 
            { return FOR;
            } 
            // fall through
          case 186: break;
          case 70: 
            { return VAR;
            } 
            // fall through
          case 187: break;
          case 71: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 188: break;
          case 72: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 189: break;
          case 73: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 190: break;
          case 74: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 191: break;
          case 75: 
            { return NULL;
            } 
            // fall through
          case 192: break;
          case 76: 
            { return TRUE;
            } 
            // fall through
          case 193: break;
          case 77: 
            { return TEST;
            } 
            // fall through
          case 194: break;
          case 78: 
            { return ENUM;
            } 
            // fall through
          case 195: break;
          case 79: 
            { return ELSE;
            } 
            // fall through
          case 196: break;
          case 80: 
            { return UNION;
            } 
            // fall through
          case 197: break;
          case 81: 
            { return BREAK;
            } 
            // fall through
          case 198: break;
          case 82: 
            { return CONST;
            } 
            // fall through
          case 199: break;
          case 83: 
            { return CATCH;
            } 
            // fall through
          case 200: break;
          case 84: 
            { return ASYNC;
            } 
            // fall through
          case 201: break;
          case 85: 
            { return ALIGN;
            } 
            // fall through
          case 202: break;
          case 86: 
            { return AWAIT;
            } 
            // fall through
          case 203: break;
          case 87: 
            { return ERROR;
            } 
            // fall through
          case 204: break;
          case 88: 
            { return FALSE;
            } 
            // fall through
          case 205: break;
          case 89: 
            { return DEFER;
            } 
            // fall through
          case 206: break;
          case 90: 
            { return WHILE;
            } 
            // fall through
          case 207: break;
          case 91: 
            { return ORELSE;
            } 
            // fall through
          case 208: break;
          case 92: 
            { return OPAQUE;
            } 
            // fall through
          case 209: break;
          case 93: 
            { return STRUCT;
            } 
            // fall through
          case 210: break;
          case 94: 
            { return SWITCH;
            } 
            // fall through
          case 211: break;
          case 95: 
            { return RESUME;
            } 
            // fall through
          case 212: break;
          case 96: 
            { return RETURN;
            } 
            // fall through
          case 213: break;
          case 97: 
            { return PACKED;
            } 
            // fall through
          case 214: break;
          case 98: 
            { return EXTERN;
            } 
            // fall through
          case 215: break;
          case 99: 
            { return EXPORT;
            } 
            // fall through
          case 216: break;
          case 100: 
            { return INLINE;
            } 
            // fall through
          case 217: break;
          case 101: 
            { return NOALIAS;
            } 
            // fall through
          case 218: break;
          case 102: 
            { return SUSPEND;
            } 
            // fall through
          case 219: break;
          case 103: 
            { return ANY_TYPE;
            } 
            // fall through
          case 220: break;
          case 104: 
            { return NOINLINE;
            } 
            // fall through
          case 221: break;
          case 105: 
            { return CONTINUE;
            } 
            // fall through
          case 222: break;
          case 106: 
            { return COMPTIME;
            } 
            // fall through
          case 223: break;
          case 107: 
            { return CALLCONV;
            } 
            // fall through
          case 224: break;
          case 108: 
            { return ANYFRAME;
            } 
            // fall through
          case 225: break;
          case 109: 
            { return ERRDEFER;
            } 
            // fall through
          case 226: break;
          case 110: 
            { return VOLATILE;
            } 
            // fall through
          case 227: break;
          case 111: 
            { return UNDEFINED;
            } 
            // fall through
          case 228: break;
          case 112: 
            { return NOSUSPEND;
            } 
            // fall through
          case 229: break;
          case 113: 
            { return ALLOWZERO;
            } 
            // fall through
          case 230: break;
          case 114: 
            { return UNREACHABLE;
            } 
            // fall through
          case 231: break;
          case 115: 
            { return THREAD_LOCAL;
            } 
            // fall through
          case 232: break;
          case 116: 
            { return LINKSECTION;
            } 
            // fall through
          case 233: break;
          case 117: 
            { return USING_NAME_SPACE;
            } 
            // fall through
          case 234: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
