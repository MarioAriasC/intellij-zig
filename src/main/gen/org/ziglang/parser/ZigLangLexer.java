/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZigLangLexer.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\36\1\2\3\3\22\20\1\23\1\77\1\35\2\20\1\104\1\100\1\6\1\113\1\114"+
    "\1\105\1\103\1\115\1\44\1\42\1\24\1\41\11\26\1\116\1\112\1\75\1\66\1\76\1"+
    "\111\1\20\1\117\3\25\1\45\1\25\2\27\1\121\6\27\1\43\3\27\1\122\2\27\1\120"+
    "\3\27\1\107\1\30\1\110\1\101\1\40\1\20\1\54\1\63\1\51\1\62\1\56\1\64\1\71"+
    "\1\70\1\60\1\27\1\61\1\67\1\57\1\37\1\52\1\53\1\55\1\50\1\46\1\47\1\32\1\65"+
    "\1\73\1\31\1\72\1\74\1\33\1\102\1\34\1\106\1\20\5\10\1\5\12\10\20\15\1\22"+
    "\37\4\2\0\36\17\1\16\14\13\1\14\2\13\1\12\3\11\1\7\213\0\1\21\177\0\13\21"+
    "\35\0\2\1\5\0\1\21\57\0\1\21\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\4"+
    "\1\6\1\7\1\1\1\4\1\5\1\10\1\11\3\4"+
    "\1\12\11\4\1\13\2\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\4\7\0"+
    "\1\36\1\0\1\5\2\0\2\4\2\0\1\37\1\4"+
    "\1\0\1\40\1\41\1\42\1\43\1\44\1\45\11\4"+
    "\1\46\13\4\1\47\2\4\1\50\3\4\1\51\1\52"+
    "\2\4\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\4\1\73\7\0\1\74\1\75\1\0\2\76"+
    "\1\0\2\4\1\37\2\4\1\0\1\77\1\100\3\4"+
    "\1\101\12\4\1\102\1\4\1\103\1\4\1\104\13\4"+
    "\1\105\1\4\1\106\2\4\1\107\1\110\1\111\1\112"+
    "\1\4\12\0\4\4\2\0\3\4\1\113\22\4\1\114"+
    "\2\4\1\115\7\4\3\0\1\116\3\4\1\0\1\76"+
    "\6\4\1\117\2\4\1\120\6\4\1\121\1\122\3\4"+
    "\1\123\2\4\1\124\1\125\2\4\1\126\1\127\3\4"+
    "\1\0\1\4\1\130\1\131\1\4\1\132\1\133\3\4"+
    "\1\134\1\135\1\136\3\4\1\137\1\140\1\4\1\141"+
    "\5\4\1\0\1\142\4\4\1\143\7\4\1\144\1\4"+
    "\1\145\1\146\1\147\1\150\1\4\1\151\1\152\2\4"+
    "\1\153\1\4\1\154\5\4\1\155\1\156\2\4\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\123\0\123\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437"+
    "\0\u048a\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf"+
    "\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967"+
    "\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0bff"+
    "\0\123\0\123\0\123\0\123\0\123\0\123\0\123\0\123"+
    "\0\123\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44"+
    "\0\u0e97\0\123\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036\0\u1089"+
    "\0\u0298\0\u10dc\0\123\0\u112f\0\u1182\0\u11d5\0\123\0\123"+
    "\0\123\0\123\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7"+
    "\0\u141a\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9\0\u160c\0\u165f"+
    "\0\u16b2\0\u1705\0\u1758\0\u17ab\0\u17fe\0\u1851\0\u18a4\0\u18f7"+
    "\0\u019f\0\u194a\0\u199d\0\u019f\0\u19f0\0\u1a43\0\u1a96\0\123"+
    "\0\123\0\u1ae9\0\u1b3c\0\123\0\u1b8f\0\123\0\u1be2\0\123"+
    "\0\123\0\123\0\123\0\123\0\123\0\123\0\u1c35\0\123"+
    "\0\123\0\u1c88\0\123\0\u1cdb\0\123\0\u1d2e\0\u1d81\0\u1dd4"+
    "\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c"+
    "\0\u20bf\0\u2112\0\u2165\0\u21b8\0\u0298\0\u220b\0\u225e\0\u22b1"+
    "\0\123\0\123\0\u2304\0\u2357\0\u23aa\0\u019f\0\u23fd\0\u2450"+
    "\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695\0\u26e8"+
    "\0\u019f\0\u273b\0\u019f\0\u278e\0\u019f\0\u27e1\0\u2834\0\u2887"+
    "\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f"+
    "\0\u019f\0\u2b72\0\u019f\0\u2bc5\0\u2c18\0\123\0\123\0\123"+
    "\0\123\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d"+
    "\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5"+
    "\0\u3148\0\u319b\0\u31ee\0\u3241\0\u3294\0\u019f\0\u32e7\0\u333a"+
    "\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2"+
    "\0\u3625\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a"+
    "\0\u019f\0\u38bd\0\u3910\0\u019f\0\u3963\0\u39b6\0\u3a09\0\u3a5c"+
    "\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\u3c4e\0\u019f\0\u3ca1"+
    "\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39"+
    "\0\u3f8c\0\u3fdf\0\u019f\0\u4032\0\u4085\0\u019f\0\u40d8\0\u412b"+
    "\0\u417e\0\u41d1\0\u4224\0\u4277\0\u019f\0\u019f\0\u42ca\0\u431d"+
    "\0\u4370\0\u019f\0\u43c3\0\u4416\0\u019f\0\u019f\0\u4469\0\u44bc"+
    "\0\u019f\0\u019f\0\u450f\0\u4562\0\u45b5\0\u4608\0\u465b\0\u019f"+
    "\0\u019f\0\u46ae\0\u019f\0\u019f\0\u4701\0\u4754\0\u47a7\0\u019f"+
    "\0\u019f\0\u019f\0\u47fa\0\u484d\0\u48a0\0\u019f\0\u019f\0\u48f3"+
    "\0\u019f\0\u4946\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5\0\u019f"+
    "\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u019f\0\u4c84\0\u4cd7\0\u4d2a"+
    "\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76\0\u019f\0\u4ec9\0\u019f\0\u019f"+
    "\0\u019f\0\u019f\0\u4f1c\0\u019f\0\u019f\0\u4f6f\0\u4fc2\0\u019f"+
    "\0\u5015\0\u019f\0\u5068\0\u50bb\0\u510e\0\u5161\0\u51b4\0\u019f"+
    "\0\u019f\0\u5207\0\u525a\0\u019f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\3\1\4\12\2\3\3\1\5"+
    "\1\6\1\7\1\6\1\2\1\6\1\10\1\11\1\12"+
    "\1\13\1\3\1\14\1\6\1\15\1\16\1\6\1\17"+
    "\1\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\6\1\27\1\6\1\30\1\6\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\3\6\1\37\1\6\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\3\6\124\0\3\3\1\0\1\3\13\0\3\3"+
    "\12\0\1\3\67\0\1\63\2\0\1\64\2\0\1\65"+
    "\1\0\1\66\3\0\1\67\1\63\2\0\5\63\1\70"+
    "\72\63\24\0\1\71\41\0\1\72\61\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\21\6\1\0"+
    "\6\6\22\0\4\6\6\0\1\73\17\0\1\74\12\0"+
    "\1\74\1\75\2\0\1\76\10\0\1\76\71\0\3\6"+
    "\1\0\2\6\4\0\1\77\2\6\1\0\1\6\1\0"+
    "\1\6\1\100\17\6\1\0\6\6\22\0\4\6\2\101"+
    "\1\0\25\101\1\102\4\101\1\103\65\101\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\5\6"+
    "\1\104\13\6\1\0\6\6\22\0\4\6\6\0\1\73"+
    "\17\0\1\74\2\0\1\105\7\0\1\74\1\75\2\0"+
    "\1\76\10\0\1\76\106\0\1\106\42\0\1\107\3\0"+
    "\1\110\77\0\1\111\7\0\1\112\5\0\1\113\43\0"+
    "\3\6\1\0\1\6\1\114\4\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\115\16\6\1\0\4\6\1\116\1\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\3\6\1\117\5\6\1\120\7\6"+
    "\1\0\1\6\1\121\4\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\11\6"+
    "\1\122\7\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\5\6"+
    "\1\123\1\6\1\124\11\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\3\6\1\125\2\6\1\126\12\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\1\6\1\127\4\0"+
    "\3\6\1\0\1\6\1\0\7\6\1\130\11\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\1\131\2\6\1\0\1\6\1\0\1\6\1\132\17\6"+
    "\1\0\1\133\5\6\22\0\4\6\25\0\3\6\1\0"+
    "\1\134\1\6\4\0\1\135\2\6\1\0\1\6\1\0"+
    "\3\6\1\136\15\6\1\0\1\137\5\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\1\140\2\6\1\0"+
    "\1\6\1\0\17\6\1\141\1\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\11\6\1\142\7\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\3\6\1\143\15\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\1\144\2\6"+
    "\1\0\1\6\1\0\5\6\1\145\13\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\5\6\1\146\1\6\1\147\11\6"+
    "\1\0\6\6\22\0\4\6\66\0\1\150\7\0\1\151"+
    "\51\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\13\6\1\152\5\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\1\6\1\153\4\6\22\0\4\6"+
    "\66\0\1\154\6\0\1\155\113\0\1\156\7\0\1\157"+
    "\112\0\1\160\122\0\1\161\122\0\1\162\122\0\1\163"+
    "\13\0\1\164\106\0\1\165\14\0\1\166\1\167\104\0"+
    "\1\170\122\0\1\171\15\0\1\172\1\173\42\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\21\6"+
    "\1\0\6\6\22\0\1\6\1\174\2\6\6\0\1\175"+
    "\123\0\1\176\2\0\1\177\1\0\1\200\1\0\1\201"+
    "\110\0\2\66\2\0\1\66\4\0\1\66\4\0\1\66"+
    "\104\0\2\67\2\0\1\67\4\0\1\67\4\0\1\67"+
    "\104\0\2\63\2\0\1\63\4\0\1\63\4\0\1\63"+
    "\106\0\1\63\22\0\1\202\1\203\2\0\3\63\10\0"+
    "\1\63\52\0\1\204\3\205\1\204\1\205\16\204\1\206"+
    "\76\204\40\0\1\207\110\0\1\74\12\0\1\74\107\0"+
    "\1\210\12\0\1\210\107\0\1\211\12\0\1\211\2\0"+
    "\1\212\36\0\1\212\44\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\13\6\1\213\5\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\13\6\1\214\5\6\1\0"+
    "\6\6\22\0\4\6\2\101\1\0\25\101\1\102\4\101"+
    "\1\215\65\101\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\216\11\6\1\217\5\6"+
    "\1\0\6\6\22\0\4\6\25\0\2\220\12\0\1\220"+
    "\3\0\1\220\3\0\1\220\2\0\1\220\1\0\1\220"+
    "\3\0\3\220\32\0\1\220\45\0\1\221\146\0\1\222"+
    "\61\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\223\17\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\3\6\1\224\15\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\13\6\1\225\5\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\3\6\1\226\2\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\227\17\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\3\6\1\230\15\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\231\1\232\16\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\1\233\2\6"+
    "\1\0\1\6\1\0\12\6\1\234\6\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\2\6\1\235\16\6\1\0\1\236"+
    "\5\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\11\6\1\237\7\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\7\6\1\240\11\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\16\6\1\241\2\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\4\6\1\242\14\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\15\6\1\243\3\6\1\0"+
    "\3\6\1\244\2\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\12\6\1\245"+
    "\6\6\1\0\3\6\1\246\2\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\13\6\1\247\5\6\1\0\1\250\5\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\251\3\6\1\252\12\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\1\6\1\253\4\0"+
    "\3\6\1\0\1\6\1\0\21\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\3\6\1\254\15\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\255\17\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\21\6\1\0\1\256\5\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\17\6\1\257\1\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\11\6\1\260\7\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\3\6\1\261\15\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\1\262\5\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\3\6\1\263\15\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\1\264\2\6\1\0\1\6"+
    "\1\0\21\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\13\6"+
    "\1\265\5\6\1\0\6\6\22\0\4\6\66\0\1\266"+
    "\122\0\1\267\122\0\1\270\122\0\1\271\61\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\21\6"+
    "\1\0\6\6\22\0\1\272\3\6\6\0\1\273\122\0"+
    "\1\274\122\0\1\275\122\0\1\276\141\0\2\277\12\0"+
    "\1\277\3\0\1\277\3\0\1\277\2\0\1\277\1\0"+
    "\1\277\3\0\3\277\32\0\1\277\36\0\1\300\67\0"+
    "\1\204\3\205\1\204\1\205\115\204\123\205\1\206\3\205"+
    "\1\206\1\205\115\206\6\0\1\301\17\0\1\302\12\0"+
    "\1\302\67\0\1\303\36\0\1\76\10\0\1\76\52\0"+
    "\1\304\142\0\1\211\12\0\1\211\106\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\5\6\1\305"+
    "\13\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\1\306\2\6\1\0\1\6\1\0\21\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\1\6"+
    "\1\307\4\0\3\6\1\0\1\6\1\0\21\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\1\310\2\6\1\0\1\6\1\0\21\6\1\0\6\6"+
    "\22\0\4\6\6\0\1\311\33\0\1\312\1\76\7\0"+
    "\1\76\74\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\6\6\1\313\12\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\1\6\1\314\4\0\3\6"+
    "\1\0\1\6\1\0\21\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\315\16\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\316\16\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\11\6\1\317\7\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\1\6\1\320\4\0\3\6\1\0"+
    "\1\6\1\0\21\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\1\6\1\321\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\322\1\323\16\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\6\6\1\324\12\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\4\6\1\325\14\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\21\6\1\0\1\326\5\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\21\6"+
    "\1\0\1\327\5\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\10\6\1\330"+
    "\10\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\14\6\1\331"+
    "\4\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\2\6\1\332"+
    "\14\6\1\333\1\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\1\334\2\6\1\0\1\6"+
    "\1\0\21\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\21\6"+
    "\1\0\2\6\1\335\3\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\5\6"+
    "\1\336\13\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\11\6"+
    "\1\337\7\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\5\6"+
    "\1\340\13\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\12\6"+
    "\1\341\6\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\5\6"+
    "\1\342\7\6\1\343\3\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\11\6\1\344\7\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\13\6\1\345\5\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\11\6\1\346\7\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\7\6\1\347\11\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\7\6\1\350\11\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\14\6\1\351\4\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\1\352\5\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\21\6\1\0\6\6\22\0\2\6\1\353\1\6\5\0"+
    "\1\66\2\0\1\66\116\0\1\66\10\0\1\66\4\0"+
    "\1\66\105\0\1\67\2\0\1\67\4\0\1\67\111\0"+
    "\1\67\15\0\1\67\125\0\2\63\12\0\1\63\3\0"+
    "\1\63\3\0\1\63\2\0\1\63\1\0\1\63\3\0"+
    "\3\63\32\0\1\63\30\0\2\354\12\0\1\354\3\0"+
    "\1\354\3\0\1\354\2\0\1\354\1\0\1\354\3\0"+
    "\3\354\32\0\1\354\31\0\1\302\12\0\1\302\67\0"+
    "\1\73\33\0\1\75\2\0\1\76\10\0\1\76\104\0"+
    "\1\355\122\0\1\356\107\0\3\6\1\0\2\6\4\0"+
    "\1\357\2\6\1\0\1\6\1\0\21\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\21\6\1\0\2\6\1\360\3\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\361\17\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\21\6\1\0\1\362\5\6\22\0"+
    "\4\6\40\0\1\363\107\0\2\364\12\0\1\364\3\0"+
    "\1\364\3\0\1\364\2\0\1\364\1\0\1\364\3\0"+
    "\3\364\32\0\1\364\30\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\11\6\1\365\7\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\4\6\1\366\14\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\4\6\1\367\14\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\7\6\1\370\11\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\12\6\1\371\6\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\3\6\1\372\15\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\2\6\1\373\16\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\13\6\1\374\5\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\2\6\1\375\16\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\21\6\1\0\1\6\1\376"+
    "\4\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\4\6\1\377\14\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\u0100\17\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\1\6\1\u0101"+
    "\4\0\3\6\1\0\1\6\1\0\21\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\11\6\1\u0102\7\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\21\6\1\0\3\6\1\u0103\2\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\3\6\1\u0104\15\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\4\6\1\u0105\14\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\1\u0106"+
    "\2\6\1\0\1\6\1\0\21\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\21\6\1\0\4\6\1\u0107\1\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\3\6\1\u0108\15\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\3\6\1\u0109\15\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\3\6\1\u010a\15\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\11\6\1\u010b\7\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\1\u010c\2\6"+
    "\1\0\1\6\1\0\21\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\3\6\1\u010d\15\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\14\6\1\u010e\4\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\u010f\16\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\u0110\17\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\11\6\1\u0111\7\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\6\6\22\0\3\6\1\u0112\25\0"+
    "\2\354\5\0\1\63\4\0\1\354\3\0\1\354\3\0"+
    "\1\354\2\0\1\354\1\0\1\354\3\0\3\354\32\0"+
    "\1\354\11\0\1\75\17\0\1\210\12\0\1\210\67\0"+
    "\1\212\17\0\1\211\12\0\1\211\106\0\3\6\1\0"+
    "\2\6\4\0\1\u0113\2\6\1\0\1\6\1\0\21\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\6\6\1\u0114\12\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\13\6\1\u0115\5\6"+
    "\1\0\6\6\22\0\4\6\6\0\1\105\16\0\2\220"+
    "\12\0\1\220\3\0\1\220\3\0\1\220\2\0\1\220"+
    "\1\0\1\220\3\0\3\220\32\0\1\220\11\0\1\u0116"+
    "\34\0\1\76\7\0\1\76\74\0\3\6\1\0\2\6"+
    "\4\0\1\u0117\2\6\1\0\1\6\1\0\21\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\2\6\1\u0118\16\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\21\6\1\0\1\6\1\u0119"+
    "\4\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\15\6\1\u011a\3\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\11\6\1\u011b\7\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\1\u011c\2\6\1\0\1\6\1\0\21\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\1\u011d"+
    "\2\6\1\0\1\6\1\0\21\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\13\6\1\u011e\5\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\5\6\1\u011f\13\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\11\6\1\u0120\7\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\11\6\1\u0121\7\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\15\6\1\u0122\3\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\6\6\1\u0123\12\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\7\6\1\u0124\11\6\1\0\6\6\22\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\3\6\1\0"+
    "\1\6\1\0\21\6\1\0\5\6\1\u0125\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\1\u0126\2\6\1\0"+
    "\1\6\1\0\21\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\u0127\16\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\17\6\1\u0128\1\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\11\6\1\u0129\7\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\13\6\1\u012a\5\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\11\6\1\u012b\7\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\7\6\1\u012c\11\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\0\1\6\1\0"+
    "\11\6\1\u012d\7\6\1\0\6\6\22\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\1\u012e\2\6\1\0\1\6"+
    "\1\0\21\6\1\0\6\6\22\0\4\6\40\0\1\u012f"+
    "\107\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\15\6\1\u0130\3\6\1\0\6\6\22\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\1\u0131\5\6\22\0\4\6\25\0"+
    "\3\6\1\0\1\6\1\u0132\4\0\3\6\1\0\1\6"+
    "\1\0\21\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\0\1\6\1\0\12\6"+
    "\1\u0133\6\6\1\0\6\6\22\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\1\u0134\2\6\1\0\1\6\1\0"+
    "\21\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\11\6\1\u0135"+
    "\7\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\12\6\1\u0136"+
    "\6\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\11\6\1\u0137"+
    "\7\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\11\6\1\u0138"+
    "\7\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\21\6\1\0"+
    "\1\u0139\5\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\4\6\1\u013a\14\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\12\6\1\u013b\6\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\1\u013c\2\6\1\0\1\6\1\0\21\6\1\0"+
    "\6\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\0\1\6\1\0\11\6\1\u013d\7\6\1\0"+
    "\6\6\22\0\4\6\6\0\1\312\16\0\2\364\12\0"+
    "\1\364\3\0\1\364\3\0\1\364\2\0\1\364\1\0"+
    "\1\364\3\0\3\364\32\0\1\364\30\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\5\6\1\u013e"+
    "\13\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\11\6\1\u013f"+
    "\7\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\11\6\1\u0140"+
    "\7\6\1\0\6\6\22\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\0\1\6\1\0\20\6\1\u0141"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\11\6\1\u0142\7\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\3\6\1\u0143\15\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\3\6\1\u0144\15\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\11\6\1\u0145\7\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\2\6\1\u0146\16\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\11\6\1\u0147\7\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\15\6\1\u0148\3\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\4\6\1\u0149\14\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\5\6\1\u014a\13\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\13\6\1\u014b\5\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\1\6\1\u014c\17\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\7\6\1\u014d\11\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\5\6\1\u014e\13\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\6\6\1\u014f\12\6"+
    "\1\0\6\6\22\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\0\1\6\1\0\21\6\1\0\1\u0150"+
    "\5\6\22\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\1\u0151\2\6\1\0\1\6\1\0\21\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\7\6\1\u0152\11\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\4\6\1\u0153\14\6\1\0\6\6"+
    "\22\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\0\1\6\1\0\11\6\1\u0154\7\6\1\0\6\6"+
    "\22\0\4\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21165];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\36\1\11\11\1\1\7\0"+
    "\1\11\1\0\1\1\2\0\2\1\2\0\1\11\1\1"+
    "\1\0\1\1\4\11\35\1\2\11\2\1\1\11\1\1"+
    "\1\11\1\1\7\11\1\1\2\11\1\1\1\11\1\1"+
    "\1\11\7\0\2\1\1\0\2\1\1\0\5\1\1\0"+
    "\2\11\43\1\4\11\1\1\12\0\4\1\2\0\41\1"+
    "\3\0\4\1\1\0\42\1\1\0\30\1\1\0\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 112: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 113: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 114: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 115: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 116: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 117: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 118: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 119: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 120: break;
          case 10: 
            { return LETTERC;
            } 
            // fall through
          case 121: break;
          case 11: 
            { return EQUAL;
            } 
            // fall through
          case 122: break;
          case 12: 
            { return LARROW;
            } 
            // fall through
          case 123: break;
          case 13: 
            { return RARROW;
            } 
            // fall through
          case 124: break;
          case 14: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 125: break;
          case 15: 
            { return AMPERSAND;
            } 
            // fall through
          case 126: break;
          case 16: 
            { return CARET;
            } 
            // fall through
          case 127: break;
          case 17: 
            { return PIPE;
            } 
            // fall through
          case 128: break;
          case 18: 
            { return PLUS;
            } 
            // fall through
          case 129: break;
          case 19: 
            { return PERCENT;
            } 
            // fall through
          case 130: break;
          case 20: 
            { return ASTERISK;
            } 
            // fall through
          case 131: break;
          case 21: 
            { return TILDE;
            } 
            // fall through
          case 132: break;
          case 22: 
            { return LBRACKET;
            } 
            // fall through
          case 133: break;
          case 23: 
            { return RBRACKET;
            } 
            // fall through
          case 134: break;
          case 24: 
            { return QUESTIONMARK;
            } 
            // fall through
          case 135: break;
          case 25: 
            { return SEMICOLON;
            } 
            // fall through
          case 136: break;
          case 26: 
            { return LPAREN;
            } 
            // fall through
          case 137: break;
          case 27: 
            { return RPAREN;
            } 
            // fall through
          case 138: break;
          case 28: 
            { return COMMA;
            } 
            // fall through
          case 139: break;
          case 29: 
            { return COLON;
            } 
            // fall through
          case 140: break;
          case 30: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 141: break;
          case 31: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 142: break;
          case 32: 
            { return DOT2;
            } 
            // fall through
          case 143: break;
          case 33: 
            { return DOTASTERISK;
            } 
            // fall through
          case 144: break;
          case 34: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 145: break;
          case 35: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 146: break;
          case 36: 
            { return MINUSRARROW;
            } 
            // fall through
          case 147: break;
          case 37: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 148: break;
          case 38: 
            { return OR;
            } 
            // fall through
          case 149: break;
          case 39: 
            { return IF;
            } 
            // fall through
          case 150: break;
          case 40: 
            { return FN;
            } 
            // fall through
          case 151: break;
          case 41: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 152: break;
          case 42: 
            { return EQUALRARROW;
            } 
            // fall through
          case 153: break;
          case 43: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 154: break;
          case 44: 
            { return LARROW2;
            } 
            // fall through
          case 155: break;
          case 45: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 156: break;
          case 46: 
            { return RARROW2;
            } 
            // fall through
          case 157: break;
          case 47: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 158: break;
          case 48: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 159: break;
          case 49: 
            { return CARETEQUAL;
            } 
            // fall through
          case 160: break;
          case 50: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 161: break;
          case 51: 
            { return PIPE2;
            } 
            // fall through
          case 162: break;
          case 52: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 163: break;
          case 53: 
            { return PLUS2;
            } 
            // fall through
          case 164: break;
          case 54: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 165: break;
          case 55: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 166: break;
          case 56: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 167: break;
          case 57: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 168: break;
          case 58: 
            { return ASTERISK2;
            } 
            // fall through
          case 169: break;
          case 59: 
            { return CHAR_LITERAL;
            } 
            // fall through
          case 170: break;
          case 60: 
            { return CONTAINER_DOC;
            } 
            // fall through
          case 171: break;
          case 61: 
            { return COMMENT;
            } 
            // fall through
          case 172: break;
          case 62: 
            { return FLOAT;
            } 
            // fall through
          case 173: break;
          case 63: 
            { return DOT3;
            } 
            // fall through
          case 174: break;
          case 64: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 175: break;
          case 65: 
            { return TRY;
            } 
            // fall through
          case 176: break;
          case 66: 
            { return PUB;
            } 
            // fall through
          case 177: break;
          case 67: 
            { return AND;
            } 
            // fall through
          case 178: break;
          case 68: 
            { return ASM;
            } 
            // fall through
          case 179: break;
          case 69: 
            { return FOR;
            } 
            // fall through
          case 180: break;
          case 70: 
            { return VAR;
            } 
            // fall through
          case 181: break;
          case 71: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 182: break;
          case 72: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 183: break;
          case 73: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 184: break;
          case 74: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 185: break;
          case 75: 
            { return TEST;
            } 
            // fall through
          case 186: break;
          case 76: 
            { return ENUM;
            } 
            // fall through
          case 187: break;
          case 77: 
            { return ELSE;
            } 
            // fall through
          case 188: break;
          case 78: 
            { return UNION;
            } 
            // fall through
          case 189: break;
          case 79: 
            { return CONST;
            } 
            // fall through
          case 190: break;
          case 80: 
            { return CATCH;
            } 
            // fall through
          case 191: break;
          case 81: 
            { return ASYNC;
            } 
            // fall through
          case 192: break;
          case 82: 
            { return ALIGN;
            } 
            // fall through
          case 193: break;
          case 83: 
            { return ERROR;
            } 
            // fall through
          case 194: break;
          case 84: 
            { return DEFER;
            } 
            // fall through
          case 195: break;
          case 85: 
            { return BREAK;
            } 
            // fall through
          case 196: break;
          case 86: 
            { return WHILE;
            } 
            // fall through
          case 197: break;
          case 87: 
            { return AWAIT;
            } 
            // fall through
          case 198: break;
          case 88: 
            { return STRUCT;
            } 
            // fall through
          case 199: break;
          case 89: 
            { return SWITCH;
            } 
            // fall through
          case 200: break;
          case 90: 
            { return RESUME;
            } 
            // fall through
          case 201: break;
          case 91: 
            { return RETURN;
            } 
            // fall through
          case 202: break;
          case 92: 
            { return ORELSE;
            } 
            // fall through
          case 203: break;
          case 93: 
            { return OPAQUE;
            } 
            // fall through
          case 204: break;
          case 94: 
            { return PACKED;
            } 
            // fall through
          case 205: break;
          case 95: 
            { return EXTERN;
            } 
            // fall through
          case 206: break;
          case 96: 
            { return EXPORT;
            } 
            // fall through
          case 207: break;
          case 97: 
            { return INLINE;
            } 
            // fall through
          case 208: break;
          case 98: 
            { return SUSPEND;
            } 
            // fall through
          case 209: break;
          case 99: 
            { return ANY_TYPE;
            } 
            // fall through
          case 210: break;
          case 100: 
            { return NOINLINE;
            } 
            // fall through
          case 211: break;
          case 101: 
            { return CONTINUE;
            } 
            // fall through
          case 212: break;
          case 102: 
            { return COMPTIME;
            } 
            // fall through
          case 213: break;
          case 103: 
            { return CALLCONV;
            } 
            // fall through
          case 214: break;
          case 104: 
            { return ANYFRAME;
            } 
            // fall through
          case 215: break;
          case 105: 
            { return ERRDEFER;
            } 
            // fall through
          case 216: break;
          case 106: 
            { return VOLATILE;
            } 
            // fall through
          case 217: break;
          case 107: 
            { return NOSUSPEND;
            } 
            // fall through
          case 218: break;
          case 108: 
            { return ALLOWZERO;
            } 
            // fall through
          case 219: break;
          case 109: 
            { return THREAD_LOCAL;
            } 
            // fall through
          case 220: break;
          case 110: 
            { return LINKSECTION;
            } 
            // fall through
          case 221: break;
          case 111: 
            { return USING_NAME_SPACE;
            } 
            // fall through
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
