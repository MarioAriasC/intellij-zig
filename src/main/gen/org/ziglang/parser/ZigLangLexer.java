/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZigLangLexer.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\16\1\2\3\1\22\0\1\3\1\46\1\15\2\0\1\54\1\47\1\0\1\64\1\65\1\55\1\52"+
    "\1\66\1\53\1\57\1\4\2\6\1\73\7\6\1\67\1\63\1\44\1\32\1\45\1\62\1\0\1\74\2"+
    "\5\1\70\2\5\2\7\1\76\5\7\1\71\4\7\1\72\2\7\1\75\3\7\1\60\1\10\1\61\1\50\1"+
    "\7\1\0\1\31\1\21\1\24\1\33\1\34\1\22\1\40\1\37\1\35\1\7\1\42\1\36\1\41\1\23"+
    "\1\25\1\20\1\7\1\17\1\26\1\27\1\12\1\30\1\7\1\11\1\43\1\7\1\13\1\51\1\14\1"+
    "\56\6\0\1\1\32\0\1\3\337\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\1\1\5"+
    "\1\6\1\7\1\10\2\5\1\4\1\5\1\4\3\5"+
    "\1\4\1\11\1\4\2\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\2\4"+
    "\1\0\1\35\1\36\2\0\1\37\1\5\2\0\1\40"+
    "\2\5\1\41\3\5\1\42\6\5\1\43\2\5\1\44"+
    "\2\5\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\2\5\1\0\1\71"+
    "\1\72\2\0\1\5\1\40\1\5\1\73\6\5\1\74"+
    "\2\5\1\75\1\76\7\5\1\77\1\100\1\101\1\102"+
    "\1\103\2\5\1\0\10\5\1\104\5\5\1\105\2\5"+
    "\1\106\4\5\1\107\1\5\1\110\4\5\1\111\4\5"+
    "\1\112\1\5\1\113\3\5\1\114\2\5\1\115\1\116"+
    "\1\117\6\5\1\120\2\5\1\121\1\122\1\123\11\5"+
    "\1\124\1\125\2\5\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\374\0\u017a"+
    "\0\u01b9\0\77\0\77\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\77\0\u07e0\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\u081f\0\u085e\0\u089d\0\77"+
    "\0\u013b\0\u08dc\0\u091b\0\77\0\u095a\0\u01f8\0\u0999\0\77"+
    "\0\u09d8\0\u0a17\0\374\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\77\0\u0ccc\0\u0d0b"+
    "\0\374\0\u0d4a\0\u0d89\0\77\0\u0dc8\0\77\0\u0e07\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\u0e46\0\77"+
    "\0\u0e85\0\77\0\77\0\u0ec4\0\77\0\77\0\77\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u01f8"+
    "\0\u10fb\0\374\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\374\0\u12b4\0\u12f3\0\374\0\374\0\u1332\0\u1371\0\u13b0"+
    "\0\u13ef\0\u142e\0\u146d\0\u14ac\0\77\0\77\0\77\0\77"+
    "\0\77\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\374\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\374\0\u18db\0\u191a\0\374\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\374\0\u1a55\0\374\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\374\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\374\0\u1c8c"+
    "\0\374\0\u1ccb\0\u1d0a\0\u1d49\0\374\0\u1d88\0\u1dc7\0\374"+
    "\0\374\0\374\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41"+
    "\0\374\0\u1f80\0\u1fbf\0\374\0\374\0\374\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\374"+
    "\0\374\0\u2235\0\u2274\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\5"+
    "\1\17\1\20\1\21\1\22\1\7\1\23\1\24\1\25"+
    "\1\26\1\5\1\27\1\30\1\31\5\7\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\2\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\2\7\1\6\1\56\2\7\100\0"+
    "\3\3\12\0\1\3\64\0\1\57\25\0\1\60\51\0"+
    "\3\7\1\0\2\7\4\0\13\7\1\0\11\7\24\0"+
    "\7\7\6\0\1\61\64\0\1\61\14\0\1\62\1\63"+
    "\2\0\3\64\3\0\1\64\60\0\3\7\1\0\2\7"+
    "\4\0\7\7\1\65\3\7\1\0\11\7\24\0\7\7"+
    "\2\66\1\0\5\66\1\67\4\66\1\70\61\66\5\0"+
    "\3\7\1\0\2\7\4\0\13\7\1\0\1\7\1\71"+
    "\7\7\24\0\7\7\5\0\3\7\1\0\1\7\1\72"+
    "\4\0\13\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\4\7\1\73\6\7\1\0\11\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\6\7"+
    "\1\74\4\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\6\7\1\75\3\7\1\76\1\0"+
    "\11\7\24\0\7\7\5\0\3\7\1\0\2\7\4\0"+
    "\1\77\12\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\1\100\12\7\1\0\1\7\1\101"+
    "\2\7\1\102\4\7\24\0\7\7\5\0\3\7\1\0"+
    "\2\7\4\0\12\7\1\103\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\4\7\1\104\6\7"+
    "\1\0\3\7\1\105\5\7\24\0\7\7\32\0\1\106"+
    "\51\0\3\7\1\0\1\107\1\7\4\0\13\7\1\0"+
    "\3\7\1\110\5\7\24\0\7\7\5\0\3\7\1\0"+
    "\2\7\4\0\3\7\1\111\1\112\6\7\1\0\11\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\13\7"+
    "\1\0\2\7\1\113\6\7\24\0\7\7\32\0\1\114"+
    "\11\0\1\115\64\0\1\116\12\0\1\117\63\0\1\120"+
    "\76\0\1\121\76\0\1\122\76\0\1\123\16\0\1\124"+
    "\57\0\1\125\17\0\1\126\1\0\1\127\54\0\1\130"+
    "\21\0\1\131\54\0\1\132\76\0\1\133\21\0\1\134"+
    "\1\135\76\0\1\136\4\0\1\137\21\0\3\7\1\0"+
    "\2\7\4\0\13\7\1\0\11\7\24\0\1\7\1\140"+
    "\5\7\5\0\3\7\1\0\2\7\4\0\13\7\1\0"+
    "\11\7\24\0\5\7\1\141\1\7\1\142\2\143\1\142"+
    "\1\144\72\142\5\0\2\145\12\0\2\145\1\0\1\145"+
    "\4\0\1\145\1\0\2\145\33\0\1\145\2\0\2\145"+
    "\15\0\1\146\70\0\3\7\1\0\2\7\4\0\13\7"+
    "\1\0\2\7\1\147\6\7\24\0\7\7\2\66\1\0"+
    "\5\66\1\67\4\66\1\150\61\66\5\0\3\7\1\0"+
    "\2\7\4\0\10\7\1\151\2\7\1\0\11\7\24\0"+
    "\7\7\5\0\3\7\1\0\2\7\4\0\2\7\1\152"+
    "\10\7\1\0\11\7\24\0\7\7\5\0\3\7\1\0"+
    "\2\7\4\0\13\7\1\0\2\7\1\153\6\7\24\0"+
    "\7\7\5\0\3\7\1\0\2\7\4\0\4\7\1\154"+
    "\6\7\1\0\6\7\1\155\2\7\24\0\7\7\5\0"+
    "\3\7\1\0\2\7\4\0\10\7\1\156\2\7\1\0"+
    "\3\7\1\157\5\7\24\0\7\7\5\0\3\7\1\0"+
    "\2\7\4\0\13\7\1\0\1\7\1\160\7\7\24\0"+
    "\7\7\5\0\3\7\1\0\2\7\4\0\13\7\1\0"+
    "\10\7\1\161\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\7\7\1\162\3\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\1\163\12\7\1\0"+
    "\11\7\24\0\7\7\5\0\3\7\1\0\2\7\4\0"+
    "\1\164\12\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\13\7\1\0\1\165\7\7\1\166"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\13\7"+
    "\1\0\2\7\1\167\6\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\1\7\1\170\6\7\1\171\2\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\7\7\1\172\3\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\3\7"+
    "\1\173\5\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\4\7\1\174\6\7\1\0\11\7\24\0\7\7"+
    "\32\0\1\175\76\0\1\176\76\0\1\177\76\0\1\200"+
    "\76\0\1\201\51\0\3\7\1\0\2\7\4\0\13\7"+
    "\1\0\11\7\24\0\2\7\1\202\4\7\5\0\3\7"+
    "\1\0\2\7\4\0\13\7\1\0\11\7\24\0\4\7"+
    "\1\203\2\7\1\142\2\143\74\142\77\143\1\144\2\143"+
    "\74\144\5\0\2\64\12\0\2\64\1\0\1\64\4\0"+
    "\1\64\1\0\2\64\33\0\1\64\2\0\2\64\7\0"+
    "\2\204\12\0\2\204\1\0\1\204\4\0\1\204\1\0"+
    "\2\204\33\0\1\204\2\0\2\204\7\0\3\7\1\0"+
    "\2\7\4\0\4\7\1\205\6\7\1\0\11\7\24\0"+
    "\7\7\5\0\3\7\1\0\1\7\1\206\4\0\13\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\4\7\1\207\6\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\7\7\1\210\3\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\1\7\1\211\11\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\5\7\1\212\5\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\3\7\1\213\5\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\3\7"+
    "\1\214\5\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\10\7\1\215\2\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\1\7"+
    "\1\216\7\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\10\7\1\217\2\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\5\7"+
    "\1\220\3\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\6\7\1\221\4\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\1\7"+
    "\1\222\7\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\1\7\1\223\7\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\2\7"+
    "\1\224\6\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\7\7\1\225\1\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\11\7"+
    "\24\0\3\7\1\226\3\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\11\7\24\0\6\7\1\227\5\0"+
    "\2\204\5\0\1\64\4\0\2\204\1\0\1\204\4\0"+
    "\1\204\1\0\2\204\33\0\1\204\2\0\2\204\7\0"+
    "\3\7\1\0\2\7\4\0\13\7\1\0\5\7\1\230"+
    "\3\7\24\0\7\7\5\0\3\7\1\0\2\7\4\0"+
    "\1\231\12\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\13\7\1\0\3\7\1\232\5\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\10\7"+
    "\1\233\2\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\10\7\1\234\2\7\1\0\11\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\13\7"+
    "\1\0\4\7\1\235\4\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\236\5\7\1\0\11\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\7\7"+
    "\1\237\3\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\12\7\1\240\1\0\11\7\24\0"+
    "\7\7\5\0\3\7\1\0\2\7\4\0\13\7\1\0"+
    "\10\7\1\241\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\4\7\1\242\6\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\1\243\12\7\1\0"+
    "\11\7\24\0\7\7\5\0\3\7\1\0\2\7\4\0"+
    "\1\244\12\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\4\7\1\245\6\7\1\0\11\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\7\7"+
    "\1\246\3\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\13\7\1\0\11\7\24\0\2\7"+
    "\1\247\4\7\5\0\3\7\1\0\2\7\4\0\4\7"+
    "\1\250\6\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\4\7\1\251\6\7\1\0\11\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\13\7"+
    "\1\0\2\7\1\252\6\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\13\7\1\0\2\7\1\253\6\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\6\7"+
    "\1\254\4\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\13\7\1\0\1\7\1\255\7\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\13\7"+
    "\1\0\1\256\10\7\24\0\7\7\5\0\3\7\1\0"+
    "\2\7\4\0\1\7\1\257\11\7\1\0\11\7\24\0"+
    "\7\7\5\0\3\7\1\0\2\7\4\0\10\7\1\260"+
    "\2\7\1\0\11\7\24\0\7\7\5\0\3\7\1\0"+
    "\2\7\4\0\4\7\1\261\6\7\1\0\11\7\24\0"+
    "\7\7\5\0\3\7\1\0\2\7\4\0\13\7\1\0"+
    "\1\7\1\262\7\7\24\0\7\7\5\0\3\7\1\0"+
    "\2\7\4\0\13\7\1\0\1\7\1\263\7\7\24\0"+
    "\7\7\5\0\3\7\1\0\2\7\4\0\12\7\1\264"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\4\7\1\265\6\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\6\7"+
    "\1\266\2\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\4\7\1\267\6\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\3\7"+
    "\1\270\5\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\1\7\1\271\7\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\5\7\1\272\5\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\6\7\1\273\2\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\13\7\1\0\1\7"+
    "\1\274\7\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\1\7\1\275\7\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\11\7\1\276\1\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\6\7\1\277\4\7\1\0\11\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\10\7\1\300\2\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\1\7\1\301\7\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\5\7\1\302\5\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\13\7\1\0\2\7\1\303\6\7\24\0\7\7"+
    "\5\0\3\7\1\0\2\7\4\0\7\7\1\304\3\7"+
    "\1\0\11\7\24\0\7\7\5\0\3\7\1\0\2\7"+
    "\4\0\12\7\1\305\1\0\11\7\24\0\7\7\5\0"+
    "\3\7\1\0\2\7\4\0\6\7\1\306\4\7\1\0"+
    "\11\7\24\0\7\7\5\0\3\7\1\0\2\7\4\0"+
    "\1\7\1\307\11\7\1\0\11\7\24\0\7\7\5\0"+
    "\3\7\1\0\2\7\4\0\13\7\1\0\3\7\1\310"+
    "\5\7\24\0\7\7\5\0\3\7\1\0\2\7\4\0"+
    "\4\7\1\311\6\7\1\0\11\7\24\0\7\7\5\0"+
    "\3\7\1\0\2\7\4\0\12\7\1\312\1\0\11\7"+
    "\24\0\7\7\5\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\313\5\7\1\0\11\7\24\0\7\7\5\0\3\7"+
    "\1\0\2\7\4\0\13\7\1\0\1\7\1\314\7\7"+
    "\24\0\7\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8883];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\30\1\1\11\1\1\7\11"+
    "\2\1\1\0\1\11\1\1\2\0\1\11\1\1\2\0"+
    "\1\11\15\1\1\11\5\1\1\11\1\1\1\11\1\1"+
    "\7\11\1\1\1\11\1\1\2\11\1\1\3\11\2\1"+
    "\1\0\2\1\2\0\26\1\5\11\2\1\1\0\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return STRING_CHAR;
            } 
            // fall through
          case 87: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 89: break;
          case 4: 
            { return HEX;
            } 
            // fall through
          case 90: break;
          case 5: 
            { return ID;
            } 
            // fall through
          case 91: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 92: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 93: break;
          case 8: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 94: break;
          case 9: 
            { return EQUAL;
            } 
            // fall through
          case 95: break;
          case 10: 
            { return LARROW;
            } 
            // fall through
          case 96: break;
          case 11: 
            { return RARROW;
            } 
            // fall through
          case 97: break;
          case 12: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 98: break;
          case 13: 
            { return AMPERSAND;
            } 
            // fall through
          case 99: break;
          case 14: 
            { return CARET;
            } 
            // fall through
          case 100: break;
          case 15: 
            { return PIPE;
            } 
            // fall through
          case 101: break;
          case 16: 
            { return PLUS;
            } 
            // fall through
          case 102: break;
          case 17: 
            { return MINUS;
            } 
            // fall through
          case 103: break;
          case 18: 
            { return PERCENT;
            } 
            // fall through
          case 104: break;
          case 19: 
            { return ASTERISK;
            } 
            // fall through
          case 105: break;
          case 20: 
            { return TILDE;
            } 
            // fall through
          case 106: break;
          case 21: 
            { return DOT;
            } 
            // fall through
          case 107: break;
          case 22: 
            { return LBRACKET;
            } 
            // fall through
          case 108: break;
          case 23: 
            { return RBRACKET;
            } 
            // fall through
          case 109: break;
          case 24: 
            { return SEMICOLON;
            } 
            // fall through
          case 110: break;
          case 25: 
            { return LPAREN;
            } 
            // fall through
          case 111: break;
          case 26: 
            { return RPAREN;
            } 
            // fall through
          case 112: break;
          case 27: 
            { return COMMA;
            } 
            // fall through
          case 113: break;
          case 28: 
            { return COLON;
            } 
            // fall through
          case 114: break;
          case 29: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 115: break;
          case 30: 
            { return INTEGER;
            } 
            // fall through
          case 116: break;
          case 31: 
            { return CHAR_ESCAPE;
            } 
            // fall through
          case 117: break;
          case 32: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 118: break;
          case 33: 
            { return FN;
            } 
            // fall through
          case 119: break;
          case 34: 
            { return OR;
            } 
            // fall through
          case 120: break;
          case 35: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 121: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 122: break;
          case 37: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 123: break;
          case 38: 
            { return LARROW2;
            } 
            // fall through
          case 124: break;
          case 39: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 125: break;
          case 40: 
            { return RARROW2;
            } 
            // fall through
          case 126: break;
          case 41: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 127: break;
          case 42: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 128: break;
          case 43: 
            { return CARETEQUAL;
            } 
            // fall through
          case 129: break;
          case 44: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 130: break;
          case 45: 
            { return PIPE2;
            } 
            // fall through
          case 131: break;
          case 46: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 132: break;
          case 47: 
            { return PLUS2;
            } 
            // fall through
          case 133: break;
          case 48: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 134: break;
          case 49: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 135: break;
          case 50: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 136: break;
          case 51: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 137: break;
          case 52: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 138: break;
          case 53: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 139: break;
          case 54: 
            { return ASTERISK2;
            } 
            // fall through
          case 140: break;
          case 55: 
            { return DOTASTERISK;
            } 
            // fall through
          case 141: break;
          case 56: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 142: break;
          case 57: 
            { return CONTAINER_DOC;
            } 
            // fall through
          case 143: break;
          case 58: 
            { return COMMENT;
            } 
            // fall through
          case 144: break;
          case 59: 
            { return PUB;
            } 
            // fall through
          case 145: break;
          case 60: 
            { return TRY;
            } 
            // fall through
          case 146: break;
          case 61: 
            { return VAR;
            } 
            // fall through
          case 147: break;
          case 62: 
            { return AND;
            } 
            // fall through
          case 148: break;
          case 63: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 149: break;
          case 64: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 150: break;
          case 65: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 151: break;
          case 66: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 152: break;
          case 67: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 153: break;
          case 68: 
            { return TEST;
            } 
            // fall through
          case 154: break;
          case 69: 
            { return ELSE;
            } 
            // fall through
          case 155: break;
          case 70: 
            { return DOT2;
            } 
            // fall through
          case 156: break;
          case 71: 
            { return CONST;
            } 
            // fall through
          case 157: break;
          case 72: 
            { return CATCH;
            } 
            // fall through
          case 158: break;
          case 73: 
            { return ALIGN;
            } 
            // fall through
          case 159: break;
          case 74: 
            { return AWAIT;
            } 
            // fall through
          case 160: break;
          case 75: 
            { return RETURN;
            } 
            // fall through
          case 161: break;
          case 76: 
            { return ORELSE;
            } 
            // fall through
          case 162: break;
          case 77: 
            { return EXPORT;
            } 
            // fall through
          case 163: break;
          case 78: 
            { return EXTERN;
            } 
            // fall through
          case 164: break;
          case 79: 
            { return INLINE;
            } 
            // fall through
          case 165: break;
          case 80: 
            { return ANY_TYPE;
            } 
            // fall through
          case 166: break;
          case 81: 
            { return NOINLINE;
            } 
            // fall through
          case 167: break;
          case 82: 
            { return COMPTIME;
            } 
            // fall through
          case 168: break;
          case 83: 
            { return CALLCONV;
            } 
            // fall through
          case 169: break;
          case 84: 
            { return THREAD_LOCAL;
            } 
            // fall through
          case 170: break;
          case 85: 
            { return LINKSECTION;
            } 
            // fall through
          case 171: break;
          case 86: 
            { return USING_NAME_SPACE;
            } 
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
