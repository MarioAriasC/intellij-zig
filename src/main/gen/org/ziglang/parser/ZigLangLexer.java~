/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ZigLangLexer.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\36\1\2\3\3\22\20\1\23\1\71\1\35\2\20\1\77\1\72\1\6\1\107\1\110\1"+
    "\100\1\75\1\111\1\76\1\102\1\24\12\26\1\112\1\106\1\67\1\60\1\70\1\105\1\20"+
    "\1\113\5\25\2\27\1\115\12\27\1\116\2\27\1\114\3\27\1\103\1\30\1\104\1\73\1"+
    "\27\1\20\1\46\1\55\1\43\1\54\1\50\1\56\1\63\1\62\1\52\1\27\1\53\1\61\1\51"+
    "\1\37\1\44\1\45\1\47\1\42\1\40\1\41\1\32\1\57\1\65\1\31\1\64\1\66\1\33\1\74"+
    "\1\34\1\101\1\20\5\10\1\5\12\10\20\15\1\22\37\4\2\0\36\17\1\16\14\13\1\14"+
    "\2\13\1\12\3\11\1\7\213\0\1\21\177\0\13\21\35\0\2\1\5\0\1\21\57\0\1\21\40"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\4"+
    "\1\6\1\7\1\1\4\4\1\10\11\4\1\11\2\4"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\4\7\0\1\36\2\4"+
    "\2\0\1\37\12\4\1\40\13\4\1\41\2\4\1\42"+
    "\3\4\1\43\1\44\2\4\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\4\1\73\7\0\1\74\1\75\2\4"+
    "\1\37\5\4\1\76\12\4\1\77\1\4\1\100\1\4"+
    "\1\101\13\4\1\102\1\4\1\103\2\4\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\4\6\0\7\4\1\112"+
    "\22\4\1\113\1\4\1\114\7\4\1\0\1\115\11\4"+
    "\1\116\2\4\1\117\6\4\1\120\1\121\5\4\1\122"+
    "\1\123\2\4\1\124\1\125\4\4\1\126\1\127\1\4"+
    "\1\130\1\131\3\4\1\132\1\133\1\134\3\4\1\135"+
    "\1\136\1\4\1\137\5\4\1\140\4\4\1\141\7\4"+
    "\1\142\1\4\1\143\1\144\1\145\1\146\1\4\1\147"+
    "\1\150\2\4\1\151\1\4\1\152\5\4\1\153\1\154"+
    "\2\4\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\117\0\117\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403"+
    "\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b"+
    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3"+
    "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\117\0\u0b1c"+
    "\0\117\0\117\0\117\0\117\0\117\0\117\0\117\0\117"+
    "\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94"+
    "\0\117\0\u0de3\0\u0e32\0\u0278\0\u0e81\0\117\0\u0ed0\0\u0f1f"+
    "\0\u0f6e\0\u0fbd\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197"+
    "\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f"+
    "\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u018b\0\u159a\0\u15e9\0\u018b"+
    "\0\u1638\0\u1687\0\u16d6\0\117\0\117\0\u1725\0\u1774\0\117"+
    "\0\u17c3\0\117\0\u1812\0\117\0\117\0\117\0\117\0\117"+
    "\0\117\0\117\0\u1861\0\117\0\117\0\u18b0\0\117\0\117"+
    "\0\u18ff\0\117\0\117\0\u194e\0\117\0\u199d\0\117\0\u19ec"+
    "\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64"+
    "\0\u1cb3\0\u1d02\0\u0278\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d"+
    "\0\u018b\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6"+
    "\0\u2105\0\u2154\0\u21a3\0\u018b\0\u21f2\0\u018b\0\u2241\0\u018b"+
    "\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc\0\u241b\0\u246a\0\u24b9"+
    "\0\u2508\0\u2557\0\u25a6\0\u018b\0\u25f5\0\u018b\0\u2644\0\u2693"+
    "\0\117\0\117\0\117\0\117\0\117\0\117\0\u26e2\0\u2731"+
    "\0\u2780\0\u27cf\0\u281e\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9"+
    "\0\u29f8\0\u2a47\0\u2a96\0\u2ae5\0\u018b\0\u2b34\0\u2b83\0\u2bd2"+
    "\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a"+
    "\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u018b"+
    "\0\u30c2\0\u018b\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c"+
    "\0\u32eb\0\u333a\0\u018b\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5"+
    "\0\u3514\0\u3563\0\u35b2\0\u3601\0\u018b\0\u3650\0\u369f\0\u018b"+
    "\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879\0\u018b\0\u018b"+
    "\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u018b\0\u018b\0\u3a53"+
    "\0\u3aa2\0\u018b\0\u018b\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u018b"+
    "\0\u018b\0\u3c2d\0\u018b\0\u018b\0\u3c7c\0\u3ccb\0\u3d1a\0\u018b"+
    "\0\u018b\0\u018b\0\u3d69\0\u3db8\0\u3e07\0\u018b\0\u018b\0\u3e56"+
    "\0\u018b\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u018b\0\u4030"+
    "\0\u407f\0\u40ce\0\u411d\0\u018b\0\u416c\0\u41bb\0\u420a\0\u4259"+
    "\0\u42a8\0\u42f7\0\u4346\0\u018b\0\u4395\0\u018b\0\u018b\0\u018b"+
    "\0\u018b\0\u43e4\0\u018b\0\u018b\0\u4433\0\u4482\0\u018b\0\u44d1"+
    "\0\u018b\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c\0\u018b\0\u018b"+
    "\0\u46ab\0\u46fa\0\u018b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\3\1\4\12\2\3\3\1\5"+
    "\1\6\1\7\1\6\1\2\1\6\1\10\1\11\1\12"+
    "\1\13\1\3\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\6\1\24\1\6\1\25\1\6\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\3\6\1\34\1\6"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\3\6\120\0\3\3"+
    "\1\0\1\3\13\0\3\3\12\0\1\3\63\0\1\62"+
    "\2\0\1\63\2\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\62\2\0\5\62\1\67\66\62\24\0\1\70\33\0"+
    "\1\71\63\0\3\6\1\0\2\6\4\0\21\6\1\0"+
    "\6\6\24\0\4\6\26\0\1\7\115\0\3\6\1\0"+
    "\2\6\4\0\1\72\1\73\17\6\1\0\6\6\24\0"+
    "\4\6\2\74\1\0\25\74\1\75\4\74\1\76\61\74"+
    "\25\0\3\6\1\0\2\6\4\0\5\6\1\77\13\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\1\6"+
    "\1\100\4\0\2\6\1\101\16\6\1\0\4\6\1\102"+
    "\1\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\103\5\6\1\104\7\6\1\0\1\6\1\105"+
    "\4\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\11\6\1\106\7\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\5\6\1\107\1\6\1\110"+
    "\11\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\111\2\6\1\112\12\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\1\6\1\113"+
    "\4\0\7\6\1\114\11\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\1\115\1\116\17\6"+
    "\1\0\1\117\5\6\24\0\4\6\25\0\3\6\1\0"+
    "\1\120\1\6\4\0\1\121\2\6\1\122\15\6\1\0"+
    "\1\123\5\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\1\124\16\6\1\125\1\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\11\6\1\126"+
    "\7\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\127\15\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\1\130\4\6"+
    "\1\131\13\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\5\6\1\132\1\6\1\133\11\6"+
    "\1\0\6\6\24\0\4\6\60\0\1\134\7\0\1\135"+
    "\53\0\3\6\1\0\2\6\4\0\13\6\1\136\5\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\21\6\1\0\1\6\1\137\4\6\24\0\4\6"+
    "\60\0\1\140\6\0\1\141\107\0\1\142\7\0\1\143"+
    "\106\0\1\144\116\0\1\145\116\0\1\146\116\0\1\147"+
    "\13\0\1\150\102\0\1\151\14\0\1\152\1\0\1\153"+
    "\77\0\1\154\7\0\1\155\6\0\1\156\77\0\1\157"+
    "\116\0\1\160\16\0\1\161\1\162\116\0\1\163\1\0"+
    "\1\164\2\0\1\165\36\0\3\6\1\0\2\6\4\0"+
    "\21\6\1\0\6\6\24\0\1\6\1\166\2\6\6\0"+
    "\1\167\117\0\1\170\2\0\1\171\1\0\1\172\1\0"+
    "\1\173\104\0\2\65\2\0\1\65\4\0\1\65\4\0"+
    "\1\65\100\0\2\66\2\0\1\66\4\0\1\66\4\0"+
    "\1\66\100\0\2\62\2\0\1\62\4\0\1\62\4\0"+
    "\1\62\102\0\1\62\22\0\1\174\1\175\2\0\3\62"+
    "\2\0\1\62\54\0\1\176\3\177\1\176\1\177\16\176"+
    "\1\200\72\176\25\0\3\6\1\0\2\6\4\0\13\6"+
    "\1\201\5\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\13\6\1\202\5\6\1\0\6\6"+
    "\24\0\4\6\2\74\1\0\25\74\1\75\4\74\1\203"+
    "\61\74\25\0\3\6\1\0\2\6\4\0\1\6\1\204"+
    "\11\6\1\205\5\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\1\6\1\206\17\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\207\15\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\13\6\1\210\5\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\21\6\1\0\3\6\1\211\2\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\1\6\1\212\17\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\213\15\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\1\6\1\214\1\215\16\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\1\216\11\6\1\217\6\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\2\6\1\220"+
    "\16\6\1\0\1\221\5\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\11\6\1\222\7\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\7\6"+
    "\1\223\11\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\16\6\1\224\2\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\4\6"+
    "\1\225\14\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\15\6\1\226\3\6\1\0\3\6"+
    "\1\227\2\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\12\6\1\230\6\6\1\0\3\6\1\231\2\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\13\6"+
    "\1\232\5\6\1\0\1\233\5\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\2\6\1\234\3\6\1\235"+
    "\12\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\1\6\1\236\4\0\21\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\3\6\1\237\15\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\1\6\1\240\17\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\21\6\1\0\1\241"+
    "\5\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\17\6\1\242\1\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\11\6\1\243\7\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\244\15\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\21\6\1\0\1\245\5\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\246\15\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\1\247\20\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\13\6\1\250"+
    "\5\6\1\0\6\6\24\0\4\6\60\0\1\251\116\0"+
    "\1\252\116\0\1\253\116\0\1\254\116\0\1\255\140\0"+
    "\1\256\41\0\3\6\1\0\2\6\4\0\21\6\1\0"+
    "\6\6\24\0\1\257\3\6\6\0\1\260\116\0\1\261"+
    "\116\0\1\262\116\0\1\263\135\0\2\264\14\0\1\264"+
    "\2\0\1\264\1\0\1\264\3\0\3\264\34\0\1\264"+
    "\36\0\1\265\63\0\1\176\3\177\1\176\1\177\111\176"+
    "\117\177\1\200\3\177\1\200\1\177\111\200\25\0\3\6"+
    "\1\0\2\6\4\0\5\6\1\266\13\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\1\267"+
    "\20\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\1\6\1\270\4\0\21\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\1\271\20\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\6\6\1\272\12\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\1\6\1\273\4\0\21\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\2\6"+
    "\1\274\16\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\2\6\1\275\16\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\11\6"+
    "\1\276\7\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\1\6\1\277\4\0\21\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\1\6\1\300\4\0\21\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\1\6\1\301\1\302\16\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\6\6\1\303"+
    "\12\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\4\6\1\304\14\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\21\6\1\0"+
    "\1\305\5\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\21\6\1\0\1\306\5\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\10\6\1\307\10\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\14\6\1\310\4\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\2\6\1\311\14\6\1\312"+
    "\1\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\1\313\20\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\21\6\1\0\2\6"+
    "\1\314\3\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\5\6\1\315\13\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\11\6\1\316\7\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\5\6\1\317\13\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\12\6\1\320\6\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\15\6\1\321\3\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\11\6\1\322\7\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\13\6\1\323\5\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\11\6\1\324\7\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\7\6\1\325\11\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\7\6\1\326\11\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\14\6\1\327\4\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\21\6\1\0\1\330"+
    "\5\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\21\6\1\0\6\6\24\0\2\6\1\331\1\6\5\0"+
    "\1\65\2\0\1\65\112\0\1\65\10\0\1\65\4\0"+
    "\1\65\101\0\1\66\2\0\1\66\4\0\1\66\105\0"+
    "\1\66\15\0\1\66\121\0\2\62\14\0\1\62\2\0"+
    "\1\62\1\0\1\62\3\0\3\62\34\0\1\62\30\0"+
    "\2\332\14\0\1\332\2\0\1\332\1\0\1\332\3\0"+
    "\3\332\34\0\1\332\30\0\3\6\1\0\2\6\4\0"+
    "\1\333\20\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\21\6\1\0\2\6\1\334\3\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\1\6"+
    "\1\335\17\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\21\6\1\0\1\336\5\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\11\6\1\337"+
    "\7\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\4\6\1\340\14\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\4\6\1\341"+
    "\14\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\7\6\1\342\11\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\12\6\1\343"+
    "\6\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\3\6\1\344\15\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\2\6\1\345"+
    "\16\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\13\6\1\346\5\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\2\6\1\347"+
    "\16\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\21\6\1\0\1\6\1\350\4\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\4\6\1\351"+
    "\14\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\1\6\1\352\17\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\1\6\1\353\4\0\21\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\11\6\1\354\7\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\21\6\1\0\3\6"+
    "\1\355\2\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\3\6\1\356\15\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\4\6\1\357\14\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\1\360\20\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\21\6\1\0\4\6\1\361"+
    "\1\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\3\6\1\362\15\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\3\6\1\363\15\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\11\6\1\364\7\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\1\365\20\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\366\15\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\14\6\1\367\4\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\2\6"+
    "\1\370\16\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\1\6\1\371\17\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\11\6"+
    "\1\372\7\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\21\6\1\0\6\6\24\0\3\6"+
    "\1\373\25\0\2\332\5\0\1\62\6\0\1\332\2\0"+
    "\1\332\1\0\1\332\3\0\3\332\34\0\1\332\30\0"+
    "\3\6\1\0\2\6\4\0\1\374\20\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\6\6"+
    "\1\375\12\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\13\6\1\376\5\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\1\377"+
    "\20\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\2\6\1\u0100\16\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\21\6\1\0"+
    "\1\6\1\u0101\4\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\15\6\1\u0102\3\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\11\6\1\u0103"+
    "\7\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\1\u0104\20\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\1\u0105\20\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\13\6\1\u0106\5\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\5\6\1\u0107\13\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\11\6\1\u0108\7\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\11\6\1\u0109\7\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\15\6\1\u010a\3\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\6\6\1\u010b\12\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\7\6\1\u010c\11\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\21\6\1\0\5\6\1\u010d"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\1\u010e"+
    "\20\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\2\6\1\u010f\16\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\17\6\1\u0110"+
    "\1\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\11\6\1\u0111\7\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\13\6\1\u0112"+
    "\5\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\11\6\1\u0113\7\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\7\6\1\u0114"+
    "\11\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\11\6\1\u0115\7\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\1\u0116\20\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\15\6\1\u0117\3\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\21\6\1\0\1\u0118"+
    "\5\6\24\0\4\6\25\0\3\6\1\0\1\6\1\u0119"+
    "\4\0\21\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\12\6\1\u011a\6\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\1\u011b"+
    "\20\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\11\6\1\u011c\7\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\12\6\1\u011d"+
    "\6\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\11\6\1\u011e\7\6\1\0\6\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\11\6\1\u011f"+
    "\7\6\1\0\6\6\24\0\4\6\25\0\3\6\1\0"+
    "\2\6\4\0\21\6\1\0\1\u0120\5\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\4\6\1\u0121\14\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\12\6\1\u0122\6\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\1\u0123\20\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\11\6\1\u0124\7\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\5\6\1\u0125\13\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\11\6\1\u0126\7\6\1\0\6\6\24\0\4\6\25\0"+
    "\3\6\1\0\2\6\4\0\11\6\1\u0127\7\6\1\0"+
    "\6\6\24\0\4\6\25\0\3\6\1\0\2\6\4\0"+
    "\20\6\1\u0128\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\11\6\1\u0129\7\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\3\6"+
    "\1\u012a\15\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\3\6\1\u012b\15\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\11\6"+
    "\1\u012c\7\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\2\6\1\u012d\16\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\11\6"+
    "\1\u012e\7\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\15\6\1\u012f\3\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\4\6"+
    "\1\u0130\14\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\5\6\1\u0131\13\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\13\6"+
    "\1\u0132\5\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\1\6\1\u0133\17\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\7\6"+
    "\1\u0134\11\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\5\6\1\u0135\13\6\1\0\6\6"+
    "\24\0\4\6\25\0\3\6\1\0\2\6\4\0\6\6"+
    "\1\u0136\12\6\1\0\6\6\24\0\4\6\25\0\3\6"+
    "\1\0\2\6\4\0\21\6\1\0\1\u0137\5\6\24\0"+
    "\4\6\25\0\3\6\1\0\2\6\4\0\1\u0138\20\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\7\6\1\u0139\11\6\1\0\6\6\24\0\4\6"+
    "\25\0\3\6\1\0\2\6\4\0\4\6\1\u013a\14\6"+
    "\1\0\6\6\24\0\4\6\25\0\3\6\1\0\2\6"+
    "\4\0\11\6\1\u013b\7\6\1\0\6\6\24\0\4\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18249];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\34\1\1\11\1\1\10\11"+
    "\1\1\7\0\1\11\2\1\2\0\1\11\35\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\7\11\1\1\2\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\0\52\1\6\11\1\1\6\0\44\1\1\0\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 110: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 111: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 112: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 113: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 114: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 115: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 116: break;
          case 8: 
            { return LETTERC;
            } 
            // fall through
          case 117: break;
          case 9: 
            { return EQUAL;
            } 
            // fall through
          case 118: break;
          case 10: 
            { return LARROW;
            } 
            // fall through
          case 119: break;
          case 11: 
            { return RARROW;
            } 
            // fall through
          case 120: break;
          case 12: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 121: break;
          case 13: 
            { return AMPERSAND;
            } 
            // fall through
          case 122: break;
          case 14: 
            { return CARET;
            } 
            // fall through
          case 123: break;
          case 15: 
            { return PIPE;
            } 
            // fall through
          case 124: break;
          case 16: 
            { return PLUS;
            } 
            // fall through
          case 125: break;
          case 17: 
            { return MINUS;
            } 
            // fall through
          case 126: break;
          case 18: 
            { return PERCENT;
            } 
            // fall through
          case 127: break;
          case 19: 
            { return ASTERISK;
            } 
            // fall through
          case 128: break;
          case 20: 
            { return TILDE;
            } 
            // fall through
          case 129: break;
          case 21: 
            { return DOT;
            } 
            // fall through
          case 130: break;
          case 22: 
            { return LBRACKET;
            } 
            // fall through
          case 131: break;
          case 23: 
            { return RBRACKET;
            } 
            // fall through
          case 132: break;
          case 24: 
            { return QUESTIONMARK;
            } 
            // fall through
          case 133: break;
          case 25: 
            { return SEMICOLON;
            } 
            // fall through
          case 134: break;
          case 26: 
            { return LPAREN;
            } 
            // fall through
          case 135: break;
          case 27: 
            { return RPAREN;
            } 
            // fall through
          case 136: break;
          case 28: 
            { return COMMA;
            } 
            // fall through
          case 137: break;
          case 29: 
            { return COLON;
            } 
            // fall through
          case 138: break;
          case 30: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 139: break;
          case 31: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 140: break;
          case 32: 
            { return OR;
            } 
            // fall through
          case 141: break;
          case 33: 
            { return IF;
            } 
            // fall through
          case 142: break;
          case 34: 
            { return FN;
            } 
            // fall through
          case 143: break;
          case 35: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 144: break;
          case 36: 
            { return EQUALRARROW;
            } 
            // fall through
          case 145: break;
          case 37: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 146: break;
          case 38: 
            { return LARROW2;
            } 
            // fall through
          case 147: break;
          case 39: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 148: break;
          case 40: 
            { return RARROW2;
            } 
            // fall through
          case 149: break;
          case 41: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 150: break;
          case 42: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 151: break;
          case 43: 
            { return CARETEQUAL;
            } 
            // fall through
          case 152: break;
          case 44: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 153: break;
          case 45: 
            { return PIPE2;
            } 
            // fall through
          case 154: break;
          case 46: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 155: break;
          case 47: 
            { return PLUS2;
            } 
            // fall through
          case 156: break;
          case 48: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 157: break;
          case 49: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 158: break;
          case 50: 
            { return MINUSRARROW;
            } 
            // fall through
          case 159: break;
          case 51: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 160: break;
          case 52: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 161: break;
          case 53: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 162: break;
          case 54: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 163: break;
          case 55: 
            { return ASTERISK2;
            } 
            // fall through
          case 164: break;
          case 56: 
            { return DOTASTERISK;
            } 
            // fall through
          case 165: break;
          case 57: 
            { return DOT2;
            } 
            // fall through
          case 166: break;
          case 58: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 167: break;
          case 59: 
            { return CHAR_LITERAL;
            } 
            // fall through
          case 168: break;
          case 60: 
            { return CONTAINER_DOC;
            } 
            // fall through
          case 169: break;
          case 61: 
            { return COMMENT;
            } 
            // fall through
          case 170: break;
          case 62: 
            { return TRY;
            } 
            // fall through
          case 171: break;
          case 63: 
            { return PUB;
            } 
            // fall through
          case 172: break;
          case 64: 
            { return AND;
            } 
            // fall through
          case 173: break;
          case 65: 
            { return ASM;
            } 
            // fall through
          case 174: break;
          case 66: 
            { return FOR;
            } 
            // fall through
          case 175: break;
          case 67: 
            { return VAR;
            } 
            // fall through
          case 176: break;
          case 68: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 177: break;
          case 69: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 178: break;
          case 70: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 179: break;
          case 71: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 180: break;
          case 72: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 181: break;
          case 73: 
            { return DOT3;
            } 
            // fall through
          case 182: break;
          case 74: 
            { return TEST;
            } 
            // fall through
          case 183: break;
          case 75: 
            { return ENUM;
            } 
            // fall through
          case 184: break;
          case 76: 
            { return ELSE;
            } 
            // fall through
          case 185: break;
          case 77: 
            { return UNION;
            } 
            // fall through
          case 186: break;
          case 78: 
            { return CONST;
            } 
            // fall through
          case 187: break;
          case 79: 
            { return CATCH;
            } 
            // fall through
          case 188: break;
          case 80: 
            { return ASYNC;
            } 
            // fall through
          case 189: break;
          case 81: 
            { return ALIGN;
            } 
            // fall through
          case 190: break;
          case 82: 
            { return DEFER;
            } 
            // fall through
          case 191: break;
          case 83: 
            { return BREAK;
            } 
            // fall through
          case 192: break;
          case 84: 
            { return WHILE;
            } 
            // fall through
          case 193: break;
          case 85: 
            { return AWAIT;
            } 
            // fall through
          case 194: break;
          case 86: 
            { return STRUCT;
            } 
            // fall through
          case 195: break;
          case 87: 
            { return SWITCH;
            } 
            // fall through
          case 196: break;
          case 88: 
            { return RESUME;
            } 
            // fall through
          case 197: break;
          case 89: 
            { return RETURN;
            } 
            // fall through
          case 198: break;
          case 90: 
            { return ORELSE;
            } 
            // fall through
          case 199: break;
          case 91: 
            { return OPAQUE;
            } 
            // fall through
          case 200: break;
          case 92: 
            { return PACKED;
            } 
            // fall through
          case 201: break;
          case 93: 
            { return EXTERN;
            } 
            // fall through
          case 202: break;
          case 94: 
            { return EXPORT;
            } 
            // fall through
          case 203: break;
          case 95: 
            { return INLINE;
            } 
            // fall through
          case 204: break;
          case 96: 
            { return SUSPEND;
            } 
            // fall through
          case 205: break;
          case 97: 
            { return ANY_TYPE;
            } 
            // fall through
          case 206: break;
          case 98: 
            { return NOINLINE;
            } 
            // fall through
          case 207: break;
          case 99: 
            { return CONTINUE;
            } 
            // fall through
          case 208: break;
          case 100: 
            { return COMPTIME;
            } 
            // fall through
          case 209: break;
          case 101: 
            { return CALLCONV;
            } 
            // fall through
          case 210: break;
          case 102: 
            { return ANYFRAME;
            } 
            // fall through
          case 211: break;
          case 103: 
            { return ERRDEFER;
            } 
            // fall through
          case 212: break;
          case 104: 
            { return VOLATILE;
            } 
            // fall through
          case 213: break;
          case 105: 
            { return NOSUSPEND;
            } 
            // fall through
          case 214: break;
          case 106: 
            { return ALLOWZERO;
            } 
            // fall through
          case 215: break;
          case 107: 
            { return THREAD_LOCAL;
            } 
            // fall through
          case 216: break;
          case 108: 
            { return LINKSECTION;
            } 
            // fall through
          case 217: break;
          case 109: 
            { return USING_NAME_SPACE;
            } 
            // fall through
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
