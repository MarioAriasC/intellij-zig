/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.ziglang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.ziglang.psi.ZigLangTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>zig.flex</tt>
 */
public class ZigLangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\35\1\11\2\0\1\45\1\36\1\0\1\56\1\57\1\13\1\43"+
    "\1\60\1\44\1\52\1\4\2\5\1\65\7\5\1\61\1\55\1\33\1\31\1\34\1\54\1\0\1\66\2"+
    "\14\1\62\4\14\1\70\5\14\1\63\4\14\1\64\2\14\1\67\3\14\1\7\1\6\1\12\1\10\1"+
    "\14\1\0\1\27\1\17\1\22\1\32\1\40\1\20\1\14\1\42\1\46\2\14\1\41\1\14\1\21\1"+
    "\23\1\15\1\14\1\30\1\24\1\25\1\16\1\26\2\14\1\53\1\14\1\47\1\37\1\50\1\51"+
    "\6\0\1\1\32\0\1\3\337\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\11\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\11\1\20\1\21\1\22\1\11\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\2\11"+
    "\1\0\1\34\1\0\1\35\1\36\1\37\1\40\1\11"+
    "\1\41\2\11\1\42\4\11\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\11\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\2\11"+
    "\1\65\1\0\1\66\1\67\3\11\1\70\1\71\1\72"+
    "\1\11\1\73\1\74\1\11\1\75\1\76\2\11\1\0"+
    "\4\11\1\77\1\100\1\11\1\0\1\101\1\102\2\11"+
    "\1\103\1\0\1\104\1\105\1\0\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\71\0\u0156"+
    "\0\71\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\71\0\71"+
    "\0\71\0\u063c\0\71\0\71\0\71\0\71\0\71\0\u0675"+
    "\0\u06ae\0\u06e7\0\71\0\u0720\0\71\0\71\0\71\0\u0759"+
    "\0\u0792\0\u01c8\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8"+
    "\0\u0921\0\71\0\71\0\u095a\0\71\0\u0993\0\71\0\71"+
    "\0\71\0\71\0\u09cc\0\71\0\71\0\u0a05\0\71\0\u0a3e"+
    "\0\71\0\u01c8\0\71\0\71\0\u0a77\0\u0ab0\0\71\0\u0ae9"+
    "\0\71\0\u01c8\0\u0b22\0\u0b5b\0\u0b94\0\u01c8\0\u01c8\0\u01c8"+
    "\0\u0bcd\0\71\0\71\0\u0c06\0\71\0\71\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u01c8\0\u01c8\0\u0dce"+
    "\0\u0e07\0\u01c8\0\u01c8\0\u0e40\0\u0e79\0\u01c8\0\u0eb2\0\u01c8"+
    "\0\u01c8\0\u0eeb\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\2\13\1\15\1\13\1\16"+
    "\1\17\1\13\1\20\1\21\1\22\1\23\1\24\1\13"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\13\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\13"+
    "\1\2\1\43\1\44\1\45\1\46\1\47\1\50\2\13"+
    "\1\5\1\51\2\13\72\0\3\3\71\0\1\52\24\0"+
    "\1\53\44\0\1\5\57\0\1\5\12\0\1\54\112\0"+
    "\1\55\52\0\1\56\15\0\1\57\13\0\1\60\30\0"+
    "\1\13\6\0\15\13\1\0\1\13\5\0\3\13\3\0"+
    "\1\13\4\0\1\13\6\0\7\13\5\0\1\13\6\0"+
    "\2\13\1\61\12\13\1\0\1\13\5\0\3\13\3\0"+
    "\1\13\4\0\1\13\6\0\7\13\5\0\1\13\6\0"+
    "\5\13\1\62\7\13\1\0\1\13\5\0\3\13\3\0"+
    "\1\13\4\0\1\13\6\0\7\13\5\0\1\13\6\0"+
    "\7\13\1\63\3\13\1\64\1\13\1\0\1\13\5\0"+
    "\3\13\3\0\1\13\4\0\1\13\6\0\7\13\5\0"+
    "\1\13\6\0\14\13\1\65\1\0\1\13\5\0\3\13"+
    "\3\0\1\13\4\0\1\13\6\0\7\13\5\0\1\13"+
    "\6\0\14\13\1\66\1\0\1\13\5\0\3\13\3\0"+
    "\1\13\4\0\1\13\6\0\7\13\5\0\1\13\6\0"+
    "\13\13\1\67\1\13\1\0\1\13\5\0\3\13\3\0"+
    "\1\13\4\0\1\13\6\0\7\13\5\0\1\13\6\0"+
    "\5\13\1\70\7\13\1\0\1\13\5\0\3\13\3\0"+
    "\1\13\4\0\1\13\6\0\7\13\5\0\1\13\6\0"+
    "\15\13\1\0\1\13\5\0\1\71\2\13\3\0\1\13"+
    "\4\0\1\13\6\0\7\13\31\0\1\72\70\0\1\73"+
    "\1\0\1\74\66\0\1\75\2\0\1\76\65\0\1\77"+
    "\70\0\1\100\70\0\1\101\5\0\1\102\36\0\1\13"+
    "\6\0\15\13\1\0\1\13\5\0\1\13\1\103\1\13"+
    "\3\0\1\13\4\0\1\13\6\0\7\13\31\0\1\104"+
    "\11\0\1\105\1\0\1\106\54\0\1\107\13\0\1\110"+
    "\54\0\1\111\44\0\1\13\6\0\4\13\1\112\10\13"+
    "\1\0\1\13\5\0\3\13\3\0\1\13\4\0\1\13"+
    "\6\0\7\13\13\0\1\113\40\0\1\114\21\0\1\13"+
    "\6\0\15\13\1\0\1\13\5\0\3\13\3\0\1\13"+
    "\4\0\1\13\6\0\1\13\1\115\5\13\5\0\1\13"+
    "\6\0\15\13\1\0\1\13\5\0\3\13\3\0\1\13"+
    "\4\0\1\13\6\0\5\13\1\116\1\13\1\52\1\0"+
    "\1\117\66\52\10\0\1\120\111\0\1\121\44\0\1\13"+
    "\6\0\3\13\1\122\11\13\1\0\1\13\5\0\3\13"+
    "\3\0\1\13\4\0\1\13\6\0\7\13\5\0\1\13"+
    "\6\0\5\13\1\123\7\13\1\0\1\13\5\0\3\13"+
    "\3\0\1\13\4\0\1\13\6\0\7\13\5\0\1\13"+
    "\6\0\11\13\1\124\3\13\1\0\1\13\5\0\3\13"+
    "\3\0\1\13\4\0\1\13\6\0\7\13\5\0\1\13"+
    "\6\0\15\13\1\0\1\13\5\0\1\125\2\13\3\0"+
    "\1\13\4\0\1\13\6\0\7\13\5\0\1\13\6\0"+
    "\15\13\1\0\1\13\5\0\3\13\3\0\1\13\4\0"+
    "\1\126\6\0\7\13\5\0\1\13\6\0\14\13\1\127"+
    "\1\0\1\13\5\0\3\13\3\0\1\13\4\0\1\13"+
    "\6\0\7\13\5\0\1\13\6\0\15\13\1\0\1\130"+
    "\5\0\3\13\3\0\1\13\4\0\1\13\6\0\7\13"+
    "\5\0\1\13\6\0\11\13\1\131\3\13\1\0\1\13"+
    "\5\0\3\13\3\0\1\13\4\0\1\13\6\0\7\13"+
    "\31\0\1\132\70\0\1\133\44\0\1\13\6\0\10\13"+
    "\1\134\4\13\1\0\1\13\5\0\3\13\3\0\1\13"+
    "\4\0\1\13\6\0\7\13\31\0\1\135\70\0\1\136"+
    "\44\0\1\13\6\0\15\13\1\0\1\13\5\0\3\13"+
    "\3\0\1\13\4\0\1\13\6\0\2\13\1\137\4\13"+
    "\5\0\1\13\6\0\15\13\1\0\1\13\5\0\3\13"+
    "\3\0\1\13\4\0\1\13\6\0\4\13\1\140\2\13"+
    "\6\0\1\141\67\0\1\13\6\0\10\13\1\142\4\13"+
    "\1\0\1\13\5\0\3\13\3\0\1\13\4\0\1\13"+
    "\6\0\7\13\5\0\1\13\6\0\6\13\1\143\6\13"+
    "\1\0\1\13\5\0\3\13\3\0\1\13\4\0\1\13"+
    "\6\0\7\13\5\0\1\13\6\0\15\13\1\0\1\13"+
    "\5\0\1\13\1\144\1\13\3\0\1\13\4\0\1\13"+
    "\6\0\7\13\5\0\1\13\6\0\2\13\1\145\12\13"+
    "\1\0\1\13\5\0\3\13\3\0\1\13\4\0\1\13"+
    "\6\0\7\13\5\0\1\13\6\0\15\13\1\0\1\13"+
    "\5\0\1\146\2\13\3\0\1\13\4\0\1\13\6\0"+
    "\7\13\5\0\1\13\6\0\15\13\1\0\1\13\5\0"+
    "\3\13\3\0\1\13\4\0\1\13\6\0\3\13\1\147"+
    "\3\13\5\0\1\13\6\0\15\13\1\0\1\13\5\0"+
    "\3\13\3\0\1\13\4\0\1\13\6\0\6\13\1\150"+
    "\11\0\1\151\64\0\1\13\6\0\11\13\1\152\3\13"+
    "\1\0\1\13\5\0\3\13\3\0\1\13\4\0\1\13"+
    "\6\0\7\13\5\0\1\13\6\0\15\13\1\0\1\13"+
    "\5\0\2\13\1\153\3\0\1\13\4\0\1\13\6\0"+
    "\7\13\5\0\1\13\6\0\10\13\1\154\4\13\1\0"+
    "\1\13\5\0\3\13\3\0\1\13\4\0\1\13\6\0"+
    "\7\13\5\0\1\13\6\0\14\13\1\155\1\0\1\13"+
    "\5\0\3\13\3\0\1\13\4\0\1\13\6\0\7\13"+
    "\5\0\1\13\6\0\15\13\1\0\1\13\5\0\3\13"+
    "\3\0\1\13\4\0\1\13\6\0\2\13\1\156\4\13"+
    "\12\0\1\157\63\0\1\13\6\0\15\13\1\0\1\13"+
    "\5\0\1\160\2\13\3\0\1\13\4\0\1\13\6\0"+
    "\7\13\5\0\1\13\6\0\5\13\1\161\7\13\1\0"+
    "\1\13\5\0\3\13\3\0\1\13\4\0\1\13\6\0"+
    "\7\13\13\0\1\162\63\0\1\163\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\25\1\3\11"+
    "\1\1\5\11\2\1\1\0\1\11\1\0\3\11\12\1"+
    "\2\11\1\1\1\11\1\1\4\11\1\1\2\11\1\1"+
    "\1\11\1\1\1\11\1\1\2\11\2\1\1\11\1\0"+
    "\1\11\10\1\2\11\1\1\2\11\2\1\1\0\7\1"+
    "\1\0\5\1\1\0\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ZigLangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZigLangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 71: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 73: break;
          case 4: 
            { return INTEGER;
            } 
            // fall through
          case 74: break;
          case 5: 
            { return LBRACKET;
            } 
            // fall through
          case 75: break;
          case 6: 
            { return CARET;
            } 
            // fall through
          case 76: break;
          case 7: 
            { return RBRACKET;
            } 
            // fall through
          case 77: break;
          case 8: 
            { return ASTERISK;
            } 
            // fall through
          case 78: break;
          case 9: 
            { return ID;
            } 
            // fall through
          case 79: break;
          case 10: 
            { return EQUAL;
            } 
            // fall through
          case 80: break;
          case 11: 
            { return LARROW;
            } 
            // fall through
          case 81: break;
          case 12: 
            { return RARROW;
            } 
            // fall through
          case 82: break;
          case 13: 
            { return EXCLAMATIONMARK;
            } 
            // fall through
          case 83: break;
          case 14: 
            { return AMPERSAND;
            } 
            // fall through
          case 84: break;
          case 15: 
            { return PIPE;
            } 
            // fall through
          case 85: break;
          case 16: 
            { return PLUS;
            } 
            // fall through
          case 86: break;
          case 17: 
            { return MINUS;
            } 
            // fall through
          case 87: break;
          case 18: 
            { return PERCENT;
            } 
            // fall through
          case 88: break;
          case 19: 
            { return LBRACE;
            } 
            // fall through
          case 89: break;
          case 20: 
            { return RBRACE;
            } 
            // fall through
          case 90: break;
          case 21: 
            { return TILDE;
            } 
            // fall through
          case 91: break;
          case 22: 
            { return DOT;
            } 
            // fall through
          case 92: break;
          case 23: 
            { return SEMICOLON;
            } 
            // fall through
          case 93: break;
          case 24: 
            { return LPAREN;
            } 
            // fall through
          case 94: break;
          case 25: 
            { return RPAREN;
            } 
            // fall through
          case 95: break;
          case 26: 
            { return COMMA;
            } 
            // fall through
          case 96: break;
          case 27: 
            { return COLON;
            } 
            // fall through
          case 97: break;
          case 28: 
            { return SLASHEQUAL;
            } 
            // fall through
          case 98: break;
          case 29: 
            { return CARETEQUAL;
            } 
            // fall through
          case 99: break;
          case 30: 
            { return ASTERISK2;
            } 
            // fall through
          case 100: break;
          case 31: 
            { return ASTERISKEQUAL;
            } 
            // fall through
          case 101: break;
          case 32: 
            { return ASTERISKPERCENT;
            } 
            // fall through
          case 102: break;
          case 33: 
            { return FN;
            } 
            // fall through
          case 103: break;
          case 34: 
            { return OR;
            } 
            // fall through
          case 104: break;
          case 35: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 105: break;
          case 36: 
            { return LARROWEQUAL;
            } 
            // fall through
          case 106: break;
          case 37: 
            { return LARROW2;
            } 
            // fall through
          case 107: break;
          case 38: 
            { return RARROWEQUAL;
            } 
            // fall through
          case 108: break;
          case 39: 
            { return RARROW2;
            } 
            // fall through
          case 109: break;
          case 40: 
            { return EXCLAMATIONMARKEQUAL;
            } 
            // fall through
          case 110: break;
          case 41: 
            { return AMPERSANDEQUAL;
            } 
            // fall through
          case 111: break;
          case 42: 
            { return PIPEEQUAL;
            } 
            // fall through
          case 112: break;
          case 43: 
            { return PIPE2;
            } 
            // fall through
          case 113: break;
          case 44: 
            { return PLUSEQUAL;
            } 
            // fall through
          case 114: break;
          case 45: 
            { return PLUS2;
            } 
            // fall through
          case 115: break;
          case 46: 
            { return PLUSPERCENT;
            } 
            // fall through
          case 116: break;
          case 47: 
            { return MINUSEQUAL;
            } 
            // fall through
          case 117: break;
          case 48: 
            { return MINUSPERCENT;
            } 
            // fall through
          case 118: break;
          case 49: 
            { return PERCENTEQUAL;
            } 
            // fall through
          case 119: break;
          case 50: 
            { return IF;
            } 
            // fall through
          case 120: break;
          case 51: 
            { return DOTASTERISK;
            } 
            // fall through
          case 121: break;
          case 52: 
            { return DOTQUESTIONMARK;
            } 
            // fall through
          case 122: break;
          case 53: 
            { return COMMENT;
            } 
            // fall through
          case 123: break;
          case 54: 
            { return ASTERISKPERCENTEQUAL;
            } 
            // fall through
          case 124: break;
          case 55: 
            { return PUB;
            } 
            // fall through
          case 125: break;
          case 56: 
            { return TRY;
            } 
            // fall through
          case 126: break;
          case 57: 
            { return VAR;
            } 
            // fall through
          case 127: break;
          case 58: 
            { return AND;
            } 
            // fall through
          case 128: break;
          case 59: 
            { return LARROW2EQUAL;
            } 
            // fall through
          case 129: break;
          case 60: 
            { return RARROW2EQUAL;
            } 
            // fall through
          case 130: break;
          case 61: 
            { return PLUSPERCENTEQUAL;
            } 
            // fall through
          case 131: break;
          case 62: 
            { return MINUSPERCENTEQUAL;
            } 
            // fall through
          case 132: break;
          case 63: 
            { return ELSE;
            } 
            // fall through
          case 133: break;
          case 64: 
            { return DOT2;
            } 
            // fall through
          case 134: break;
          case 65: 
            { return CONST;
            } 
            // fall through
          case 135: break;
          case 66: 
            { return CATCH;
            } 
            // fall through
          case 136: break;
          case 67: 
            { return AWAIT;
            } 
            // fall through
          case 137: break;
          case 68: 
            { return ORELSE;
            } 
            // fall through
          case 138: break;
          case 69: 
            { return RETURN;
            } 
            // fall through
          case 139: break;
          case 70: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
